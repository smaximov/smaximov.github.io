<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Без названия]]></title>
  <link href="http://blog.smaximov.info/atom.xml" rel="self"/>
  <link href="http://blog.smaximov.info/"/>
  <updated>2014-07-15T19:10:05+11:00</updated>
  <id>http://blog.smaximov.info/</id>
  <author>
    <name><![CDATA[Сергей Максимов]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Cabal sandbox и direnv]]></title>
    <link href="http://blog.smaximov.info/blog/2014/07/15/cabal-sandbox-and-direnv/"/>
    <updated>2014-07-15T17:26:00+11:00</updated>
    <id>http://blog.smaximov.info/blog/2014/07/15/cabal-sandbox-and-direnv</id>
    <content type="html"><![CDATA[<ul id="markdown-toc">
  <li><a href="#cabal-sandbox-to-rescue"><code>cabal sandbox</code> to rescue!</a>    <ul>
      <li><a href="#section">Инициализация</a></li>
      <li><a href="#section-1">Добавление локальной зависимости</a></li>
      <li><a href="#section-2">Удаление песочницы</a></li>
      <li><a href="#path">Манипуляция <code>PATH</code></a></li>
    </ul>
  </li>
  <li><a href="#section-3">Специфичное для директории окружение</a></li>
</ul>

<p>Cabal на текущий момент имеет очень серьёзный недостаток: он не
поддерживает одновременной установки различных версий одного и того же
пакета. В результате мы имеем ситуацию, когда обновление версии
какого-нибудь пакета может привести к тому, что сломаются пакеты,
зависящие от старой версии этого пакета.</p>

<!-- more -->

<h1 id="cabal-sandbox-to-rescue"><code>cabal sandbox</code> to rescue!</h1>

<p><a href="http://www.haskell.org/cabal/users-guide/installing-packages.html#developing-with-sandboxes">Cabal Sandboxes</a>
— это относительно новая (начиная с версии 1.18) фича
cabal-install, призванная стать (временным) решением данной проблемы.</p>

<p>«Песочницы» позволяют создать изолированные окружения для
каждого пакета. Каждое такое окружение имеет свою собственную локальную базу
данных пакетов. Также окружение может ссылаться на пакет, который ещё
не был выпущен или на версию, которой нет в архиве пакетов.</p>

<h2 id="section">Инициализация</h2>

<p>Для инициализации песочницы нужно выполнить следующую команду из
корневой директории проекта:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">cabal sandbox init
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>При этом будет сгенерирована директория <code>.cabal-sandbox</code>, в которой
будут установлены зависимости и результаты сборки пакета. Дальнейшие
команды <code>cabal</code> будут выполняться уже в контексте песочницы.</p>

<h2 id="section-1">Добавление локальной зависимости</h2>

<p><code>cabal sandbox</code> позволяет указать директорию, в которой находятся
исходные коды некоторого пакета, в качестве источника, откуда этот
пакет будет установлен в качестве зависимости.</p>

<p>Допустим, мы разрабатываем пакет <code>foo</code>, который зависит от пакета
<code>bar</code>. Представим себе, что пакета <code>bar</code> ещё нет на Hackage (или мы
пропатчили пакет <code>bar</code>, но патч ещё не отослали). Тогда можно указать
в песочнице пакета <code>foo</code>, чтобы пакет <code>bar</code> устанавливался не из
Hackage, а из исходников:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="c"># В корневой директории пакета foo</span>
</span><span class="line">cabal sandbox add-source path/to/bar
</span><span class="line"><span class="c"># Установка зависимостей: bar будет установлен из path/to/bar</span>
</span><span class="line">cabal install --dependencies-only
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="section-2">Удаление песочницы</h2>

<p>Для удаления песочницы и возврату к «обычному» режиму
Cabal нужно выполнить команду <code>cabal sandbox delete</code>. В качестве
альтернативы можно просто удалить файлы и директории песочницы:
<code>cabal.sandbox.config</code> и <code>.cabal-sandbox/</code>.</p>

<h2 id="path">Манипуляция <code>PATH</code></h2>

<p>Песочница устанавливает исполняемые файлы в поддиректорию
<code>.cabal-sandbox/bin</code> пакета. Для того, чтобы каждый раз не писать путь
к бинарникам, нужно модифицировать переменную окружения <code>PATH</code>.
Очевидный способ — добавить относительный путь
<code>.cabal-sandbox/bin</code> к переменной <code>PATH</code> в rc-файле шелла —
банален и неинтересен; рассмотрим вместо этого более гибкое решение,
которое может пригодиться и в других ситуациях.</p>

<h1 id="section-3">Специфичное для директории окружение</h1>

<p>Нас интересует решение, которое позволяло бы в зависимости от текущей
директории иметь различное значение <code>PATH</code> (а в идеале и других
переменных окружения). Такого поведения можно добиться с помощью
утилиты <a href="http://direnv.net/">direnv</a>, написанной на Go. Direnv
встраивается в шелл и загружает и восстанавливает переменные окружения
при смене рабочей директории.</p>

<p>После установки утилиты её нужно добавить
следующую строчку (в случае Zsh, который я использую) в конец
rc-файла шелла:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nb">eval</span> <span class="s2">&quot;$(direnv hook zsh)&quot;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>После этого в директории, которая требует специфических настроек
окружения, создаётся файл <code>.envrc</code>, который устанавливает и
экспортирует нужные переменные. Для нашего примера с песочницами это
был бы файл <code>.envrc</code> в корневой директории пакета со следующим
содержимым:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nb">export </span><span class="nv">PATH</span><span class="o">=</span><span class="s2">&quot;${PWD}/.cabal-sandbox/bin:${PATH}&quot;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>что эквивалентно следующей строке с использованием одной из
вспомогательных функций dirent:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">PATH_add .cabal-sandbox/bin
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>После этого нужно разрешить dirent выполнять содержимое <code>.envrc</code> в
этой директории:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">dirent allow .
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>В качестве альтернативы можно использовать команду</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">dirent edit .
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Она открывает <code>./.envrc</code> в редакторе <code>$EDITOR</code> и автоматически
разрешает этот файл после его изменения.</p>

<p>Теперь при входе в эту директорию переменные из <code>.envrc</code> будут
загружены в текущее окружение, а при выходе — выгружены.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Разбор выражений с помощью PEG]]></title>
    <link href="http://blog.smaximov.info/blog/2014/04/08/parsing-expressions-with-peg-dot-js/"/>
    <updated>2014-04-08T17:46:00+11:00</updated>
    <id>http://blog.smaximov.info/blog/2014/04/08/parsing-expressions-with-peg-dot-js</id>
    <content type="html"><![CDATA[<ul id="markdown-toc">
  <li><a href="#section">Синтаксический анализ</a>    <ul>
      <li><a href="#section-1">Формальная грамматика</a></li>
      <li><a href="#parsing-expression-grammars">Parsing Expression Grammars</a></li>
    </ul>
  </li>
  <li><a href="#pegjs">Генератор парсеров PEG.js</a></li>
  <li><a href="#section-2">Разбор языка логических выражений</a>    <ul>
      <li><a href="#section-3">Грамматика языка</a></li>
    </ul>
  </li>
  <li><a href="#section-4">Заключение</a></li>
  <li><a href="#section-5">Демонстрация</a></li>
  <li><a href="#section-6">Ссылки</a></li>
</ul>

<p>Давным давно<s>, в далёк</s> я
<a href="http://www.cyberforum.ru/post5772306.html">написал</a> код вычисления
логических выражений — просто так, задача интересной показалась.
Для этой цели был написан парсер, который преобразует строку с
логическим выражением в дерево, которое впоследствии вычисляется.
Теперь же захотелось подробно описать (для себя и для потомков), что
же при этом происходило.</p>

<p>В этом посте будет кратко затронуты понятия синтаксического анализа,
формальных грамматик, а также показан синтаксический разбор небольшого
языка с помощью PEG-парсера.</p>

<!-- more -->

<h1 id="section">Синтаксический анализ</h1>

<p>Синтаксический анализ, или <em>парсинг</em>, — это процесс анализа
последовательности символов (<em>строка</em>) какого-нибудь абстрактного <em>алфавита</em>
в соответствии правилами <em>формальной грамматики</em>. В процессе такого
анализа выявляется принадлежность этой строки определённому
<em>формальному языку</em>, который задаётся правилами грамматики над данным
алфавитом.</p>

<h2 id="section-1">Формальная грамматика</h2>

<p>Другими словами, формальная грамматика представляет собой набор
правил, описывающих множество всех возможных строк, которые получены
из некоторого алфавита и принадлежат определённому языку.</p>

<h2 id="parsing-expression-grammars">Parsing Expression Grammars</h2>

<p>Parsing Expression Grammars (PEG) — это один из видов
грамматики, введённый Брайаном Фордом в 2004 году.</p>

<p>Синтаксис состоит из нескольких элементов:</p>

<ul>
  <li>
    <p>Множества <em>терминальных</em> символов, которые «буквально» могут
присутствовать в какой-либо строке языка (обычно обозначаются в виде
строки в одинарных кавычках: <code>'terminal'</code>);</p>
  </li>
  <li>
    <p>множества <em>нетерминальных</em> символов, которым соответствуют группы
терминальных символов в соответствии с некоторыми правилами вывода;
нетерминалы также называют <em>синтаксическими переменными</em>
(обозначаются в виде строки без кавычек: <code>nonterminal</code>);</p>
  </li>
  <li>
    <p>множество <em>правил вывода</em>, которые показывают, как образуются
нетерминалы из терминалов и других нетерминалов;</p>
  </li>
  <li>
    <p>начального <em>выражения</em>.</p>
  </li>
</ul>

<p>Правила вывода имеют вид <code>nonterminal = some_expr</code>, где <code>some_expr</code>
— это <em>выражение</em>. Выражения можно определить по индукции:</p>

<ul>
  <li>
    <p><em>атомарное выражение</em> может состоять из любого терминала,
нетерминала или пустой строки;</p>
  </li>
  <li>
    <p>имея два выражения <em>e<sub>1</sub></em> и <em>e<sub>2</sub></em>, можно построить
новое выражение:</p>

    <ul>
      <li>
        <p><em>e<sub>1</sub></em> <em>e<sub>2</sub></em>: <em>последовательность</em> —
сначала идёт разбор <em>e<sub>1</sub></em>, потом (в случае успешности
разбора <em>e<sub>1</sub></em>) разбор <em>e<sub>2</sub></em>, в случае
неудачи разбора любого подвыражение разбор всего выражения
считается неудачным;</p>
      </li>
      <li>
        <p><em>e<sub>1</sub><sup>*</sup></em>, <em>e<sub>1</sub><sup>+</sup></em>,
<em>e<sub>1</sub>?</em>: <em>ноль или больше</em>, <em>один или больше</em>, <em>ноль или
один</em> раз выполняют разбор выражения <em>e<sub>1</sub></em>;</p>
      </li>
      <li>
        <p><em>e<sub>1</sub> / e<sub>2</sub></em>: <em>упорядоченный выбор</em> —
если <em>e<sub>1</sub></em> успешно, то происходит возврат, в противном
случае парсер откатывается назад и пытается выполнить разбор
<em>e<sub>2</sub></em>;</p>
      </li>
      <li>
        <p><em>&amp;e<sub>1</sub></em>: <em>и-предикат</em> —
разбор выполняется успешно, если выражение
<em>e<sub>1</sub></em> возвращает успех, но при этом парсер
не поглощает ввод;</p>
      </li>
      <li>
        <p><em>!e<sub>1</sub></em>: <em>не-предикат</em> — разбор выполняется
успешно, если выражение <em>e<sub>1</sub></em> возвращает неуспех;
парсер также не поглощает ввод.</p>
      </li>
    </ul>
  </li>
</ul>

<h1 id="pegjs">Генератор парсеров PEG.js</h1>

<p>Для данного примера мы рассмотрим парсер, который сгенерирован из
грамматики на PEG-like языке с помощью генератора PEG.js. Синтаксис
грамматик, принимаемых PEG.js, напоминает синстаксис PEG и вводит
несколько расширений. Рассмотрим вкратце некоторые из них.</p>

<ul>
  <li>
    <p>Каждое выражение грамматики помимо сопоставления с входным текстом
возвращает какой-либо результат в виде значения Javascript. Для
терминалов это сам совпавший текст, для повторений (<em>ноль или
много</em>, <em>один или много</em>) это массив результатов каждого
сопоставления выражения, для выражений-<em>предикатов</em> —
<code>undefined</code> и т. д.</p>
  </li>
  <li>
    <p><em>блок инициализации</em> — блок кода на Javascript, заключённый в
фигурные скобки, опционально предшествующий описанию правил вывода и
выполняемый перед непосредственным разбором; в основном используется
для определений функций и классов, необходимых для построения
синтаксического дерева.</p>
  </li>
  <li>
    <p><em>символьный класс</em> (<code>[characters]</code>) — выражение, описывающее
сопоставление символа входного текста какому-нибудь из символов в множестве,
заданном в символьном классе. Множество может быть задано простым
перечислением символов, диапазоном символов (<code>[a-z]</code>), инверсией
символов в множестве с помощью предшествующего символа <code>^</code>
(<code>[^a-z]</code>). Результатом выражения является совпавший символ.</p>
  </li>
  <li>
    <p><em>семантические действия</em> — выражение, представляющее собой
блок кода в фигурных скобках, который выполняется, если
предшествующее выражение совпало, и полученный результат
возвращается в качестве результата предшествующего выражения.</p>
  </li>
  <li>
    <p><em>подвыражение</em> — одно или несколько выражений, сгруппированных
с помощью круглых скобок.</p>
  </li>
  <li>
    <p><em>метка</em> — Javascript-идентификатор, присвоенный выражению (в
виде <code>label:expression</code>) и позволяющий ссылаться на результат
этого выражения внутри семантического действия.</p>
  </li>
</ul>

<p>Смысл и назначение этих расширений должны быть интуитивно понятны
читателю; в противном случае стоит подробнее ознакомиться с
<a href="http://pegjs.majda.cz/documentation#grammar-syntax-and-semantics">документацией</a>
к генератору.</p>

<h1 id="section-2">Разбор языка логических выражений</h1>

<p>Наш язык состоит из следующих элементов:</p>

<ul>
  <li>
    <p>булевы константы: <code>true</code> и <code>yes</code> — истина, <code>false</code> и <code>no</code> — ложь;</p>
  </li>
  <li>
    <p>переменные (идентификаторы, состоящие из строчных букв латинского алфавита);</p>
  </li>
  <li>
    <p>пробелы (игнорируются);</p>
  </li>
  <li>
    <p>скобки для задания приоритета вычислений;</p>
  </li>
  <li>
    <p>левоассоциативные операторы <code>&amp;</code> (конъюнкция) и <code>|</code> (дизъюнкция) с одинаковым приоритетом;</p>
  </li>
  <li>
    <p>унарный оператор <code>!</code> (отрицание), обладающий наивысшим приоритетом.</p>
  </li>
</ul>

<h2 id="section-3">Грамматика языка</h2>

<p>Сначала идёт блок инициализации, в котором объявляются узлы
синтаксического дерева, которое строится в процессе разбора входной
строки. Каждый узел обладает методом <code>evaluate</code>, принимающим словарь
окружения (<code>env</code>), содержащий привязки переменных, и вычисляющим
значение соответствующего узлу подвыражения.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="p">{</span>
</span><span class="line">  <span class="kd">function</span> <span class="nx">BooleanLiteral</span> <span class="p">(</span><span class="nx">value</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">    <span class="k">this</span><span class="p">.</span><span class="nx">evaluate</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class="line">      <span class="k">return</span> <span class="nx">value</span><span class="p">;</span>
</span><span class="line">    <span class="p">};</span>
</span><span class="line">  <span class="p">}</span>
</span><span class="line">
</span><span class="line">  <span class="kd">function</span> <span class="nx">Variable</span> <span class="p">(</span><span class="nx">variable</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">    <span class="nx">variable</span> <span class="o">=</span> <span class="nx">variable</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="s1">&#39;&#39;</span><span class="p">);</span>
</span><span class="line">    <span class="k">this</span><span class="p">.</span><span class="nx">evaluate</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">env</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">      <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="p">(</span><span class="nx">variable</span> <span class="k">in</span> <span class="nx">env</span><span class="p">))</span> <span class="p">{</span>
</span><span class="line">        <span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s2">&quot;Undefined variable `&quot;</span> <span class="o">+</span> <span class="nx">variable</span> <span class="o">+</span> <span class="s2">&quot;&#39;&quot;</span><span class="p">);</span>
</span><span class="line">      <span class="p">}</span>
</span><span class="line">
</span><span class="line">      <span class="kd">var</span> <span class="nx">value</span> <span class="o">=</span> <span class="nx">env</span><span class="p">[</span><span class="nx">variable</span><span class="p">];</span>
</span><span class="line">      <span class="k">if</span> <span class="p">((</span><span class="sr">/^(yes|true)$/</span><span class="p">).</span><span class="nx">test</span><span class="p">(</span><span class="nx">value</span><span class="p">))</span> <span class="k">return</span> <span class="kc">true</span><span class="p">;</span>
</span><span class="line">      <span class="k">if</span> <span class="p">((</span><span class="sr">/^(no|false)$/</span><span class="p">).</span><span class="nx">test</span><span class="p">(</span><span class="nx">value</span><span class="p">))</span> <span class="k">return</span> <span class="kc">false</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">      <span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s2">&quot;Variable `&quot;</span> <span class="o">+</span> <span class="nx">variable</span> <span class="o">+</span> <span class="s2">&quot;&#39; is not a boolean: &quot;</span> <span class="o">+</span> <span class="nx">value</span><span class="p">);</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">  <span class="p">}</span>
</span><span class="line">
</span><span class="line">  <span class="kd">function</span> <span class="nx">Negate</span> <span class="p">(</span><span class="nx">arg</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">    <span class="k">this</span><span class="p">.</span><span class="nx">evaluate</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">env</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">      <span class="k">return</span> <span class="o">!</span><span class="nx">arg</span><span class="p">.</span><span class="nx">evaluate</span><span class="p">(</span><span class="nx">env</span><span class="p">);</span>
</span><span class="line">    <span class="p">};</span>
</span><span class="line">  <span class="p">}</span>
</span><span class="line">
</span><span class="line">  <span class="kd">var</span> <span class="nx">dispatch</span> <span class="o">=</span> <span class="p">{</span>
</span><span class="line">    <span class="s1">&#39;&amp;&#39;</span><span class="o">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="nx">a</span> <span class="o">&amp;&amp;</span> <span class="nx">b</span> <span class="p">},</span>
</span><span class="line">    <span class="s1">&#39;|&#39;</span><span class="o">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="nx">a</span> <span class="o">||</span> <span class="nx">b</span> <span class="p">}</span>
</span><span class="line">  <span class="p">}</span>
</span><span class="line">
</span><span class="line">  <span class="kd">function</span> <span class="nx">BinOp</span> <span class="p">(</span><span class="nx">op1</span><span class="p">,</span> <span class="nx">o</span><span class="p">,</span> <span class="nx">op2</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">    <span class="k">this</span><span class="p">.</span><span class="nx">evaluate</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">env</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">      <span class="k">return</span> <span class="nx">dispatch</span><span class="p">[</span><span class="nx">o</span><span class="p">](</span><span class="nx">op1</span><span class="p">.</span><span class="nx">evaluate</span><span class="p">(</span><span class="nx">env</span><span class="p">),</span> <span class="nx">op2</span><span class="p">.</span><span class="nx">evaluate</span><span class="p">(</span><span class="nx">env</span><span class="p">));</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">  <span class="p">}</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Следом идут определения правил вывода для нетерминалов. Нетерминал
<code>space</code> (пробельные символы) — это произвольное количество
пробелов:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="nx">space</span>
</span><span class="line">  <span class="o">=</span> <span class="s1">&#39; &#39;</span><span class="o">*</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Булева константа (<code>literal</code>):</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="nx">literal</span>
</span><span class="line">  <span class="o">=</span> <span class="nx">space</span> <span class="p">(</span><span class="s1">&#39;true&#39;</span><span class="o">/</span><span class="s1">&#39;yes&#39;</span><span class="p">)</span> <span class="nx">space</span> <span class="p">{</span> <span class="k">return</span> <span class="k">new</span> <span class="nx">BooleanLiteral</span><span class="p">(</span><span class="kc">true</span><span class="p">);</span> <span class="p">}</span>
</span><span class="line">  <span class="o">/</span> <span class="nx">space</span> <span class="p">(</span><span class="s1">&#39;false&#39;</span><span class="o">/</span><span class="s1">&#39;no&#39;</span><span class="p">)</span> <span class="nx">space</span> <span class="p">{</span> <span class="k">return</span> <span class="k">new</span> <span class="nx">BooleanLiteral</span><span class="p">(</span><span class="kc">false</span><span class="p">);</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Переменная (<code>variable</code>):</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="nx">variable</span> <span class="s2">&quot;variable&quot;</span> <span class="c1">// lowercase letters</span>
</span><span class="line">  <span class="o">=</span> <span class="nx">space</span> <span class="nx">letters</span><span class="o">:</span><span class="p">[</span><span class="nx">a</span><span class="o">-</span><span class="nx">z</span><span class="p">]</span><span class="o">+</span> <span class="nx">space</span> <span class="p">{</span> <span class="k">return</span> <span class="k">new</span> <span class="nx">Variable</span><span class="p">(</span><span class="nx">letters</span><span class="p">);</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><code>primary</code>-выражение — описывает любой из следующих вариантов
— константа, переменная или выражение в скобках:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="nx">primary</span>
</span><span class="line">  <span class="o">=</span> <span class="nx">literal</span>
</span><span class="line">  <span class="o">/</span> <span class="nx">variable</span>
</span><span class="line">  <span class="o">/</span> <span class="nx">space</span> <span class="s1">&#39;(&#39;</span> <span class="nx">space</span> <span class="nx">expr</span><span class="o">:</span><span class="nx">expr</span> <span class="nx">space</span> <span class="s1">&#39;)&#39;</span> <span class="nx">space</span> <span class="p">{</span> <span class="k">return</span> <span class="nx">expr</span><span class="p">;</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><code>negate</code> — сопоставление с символом оператора логического
отрицания:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="nx">negate</span>
</span><span class="line">  <span class="o">=</span> <span class="nx">space</span> <span class="s1">&#39;!&#39;</span> <span class="nx">space</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><code>term</code> — <code>primary</code> выражение, которому может предшествовать
логическое отрицание:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="nx">term</span>
</span><span class="line">  <span class="o">=</span> <span class="nx">negate</span> <span class="nx">arg</span><span class="o">:</span><span class="p">(</span><span class="nx">primary</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="k">new</span> <span class="nx">Negate</span><span class="p">(</span><span class="nx">arg</span><span class="p">)</span> <span class="p">}</span>
</span><span class="line">  <span class="o">/</span> <span class="nx">primary</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><code>op</code> — выражение, которое возвращает один из совпавших бинарных
операторов (конъюнкция или дизъюнкция):</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="nx">op</span>
</span><span class="line">  <span class="o">=</span> <span class="nx">space</span> <span class="nx">o</span><span class="o">:</span><span class="p">(</span><span class="s1">&#39;&amp;&#39;</span> <span class="o">/</span> <span class="s1">&#39;|&#39;</span><span class="p">)</span> <span class="nx">space</span> <span class="p">{</span> <span class="k">return</span> <span class="nx">o</span><span class="p">;</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>И, наконец, правило для разбора всего логического выражения:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="nx">expr</span>
</span><span class="line">  <span class="o">=</span> <span class="nx">head</span><span class="o">:</span><span class="nx">term</span> <span class="nx">rest</span><span class="o">:</span><span class="p">(</span><span class="nx">op</span> <span class="nx">term</span><span class="p">)</span><span class="o">*</span> <span class="p">{</span>
</span><span class="line">    <span class="kd">var</span> <span class="nx">res</span> <span class="o">=</span> <span class="nx">head</span><span class="p">;</span>
</span><span class="line">    <span class="nx">rest</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">elements</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">      <span class="nx">res</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">BinOp</span><span class="p">(</span><span class="nx">res</span><span class="p">,</span> <span class="nx">elements</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="nx">elements</span><span class="p">[</span><span class="mi">1</span><span class="p">]);</span>
</span><span class="line">    <span class="p">});</span>
</span><span class="line">    <span class="k">return</span> <span class="nx">res</span><span class="p">;</span>
</span><span class="line">  <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Тут, наверное, понадобятся пояснения. Для начало избавимся от
семантических действий и меток:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="nx">expr</span>
</span><span class="line">  <span class="o">=</span> <span class="nx">term</span> <span class="p">(</span><span class="nx">op</span> <span class="nx">term</span><span class="p">)</span><span class="o">*</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Выражение <code>expr</code> — это одно или несколько выражений <code>term</code>,
разделённых бинарными операторами.</p>

<p>Рассмотрим это правило на примере разбора выражения <code>x &amp; no | z</code>.</p>

<p>В процессе разбора выражению <code>term</code> сопоставится фрагмент <code>x</code>, а
выражению <code>(op term)*</code> — <code>&amp; no | z</code>. Введём метки:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="nx">expr</span>
</span><span class="line">  <span class="o">=</span> <span class="nx">head</span><span class="o">:</span><span class="nx">term</span> <span class="nx">rest</span><span class="o">:</span><span class="p">(</span><span class="nx">op</span> <span class="nx">term</span><span class="p">)</span><span class="o">*</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>При разборе меткам присвоятся следующие значения:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="nx">head</span><span class="o">:</span> <span class="nx">Varible</span><span class="p">(</span><span class="nx">x</span><span class="p">)</span>
</span><span class="line"><span class="nx">rest</span><span class="o">:</span> <span class="p">[</span> <span class="p">[</span><span class="s1">&#39;&amp;&#39;</span><span class="p">,</span> <span class="nx">BooleanLiteral</span><span class="p">(</span><span class="nx">no</span><span class="p">)]</span> <span class="p">,</span> <span class="p">[</span><span class="s1">&#39;|&#39;</span><span class="p">,</span> <span class="nx">Variable</span><span class="p">(</span><span class="nx">z</span><span class="p">)]</span> <span class="p">]</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Рассмотрим синтаксическое действие:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="p">{</span>
</span><span class="line">  <span class="kd">var</span> <span class="nx">res</span> <span class="o">=</span> <span class="nx">head</span><span class="p">;</span>
</span><span class="line">  <span class="nx">rest</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">elements</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">    <span class="nx">res</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">BinOp</span><span class="p">(</span><span class="nx">res</span><span class="p">,</span> <span class="nx">elements</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="nx">elements</span><span class="p">[</span><span class="mi">1</span><span class="p">]);</span>
</span><span class="line">  <span class="p">});</span>
</span><span class="line">  <span class="k">return</span> <span class="nx">res</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Человеку, знакомому с Javascript, будет понятно, что этот код строит
дерева разбора начиная с метки <code>head</code> снизу вверх. Примерный вид
полученного в результате дерева:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line">             <span class="o">+</span><span class="err">––––––––––</span><span class="o">+</span>
</span><span class="line">          <span class="o">+</span><span class="err">––</span><span class="o">+</span><span class="nx">BinOp</span><span class="o">:</span> <span class="s1">&#39;|&#39;</span><span class="o">+</span><span class="err">––</span><span class="o">+</span>
</span><span class="line">          <span class="o">|</span>  <span class="o">+</span><span class="err">––––––––––</span><span class="o">+</span>  <span class="o">|</span>
</span><span class="line">          <span class="o">|</span>                <span class="o">|</span>
</span><span class="line">          <span class="o">|</span>                <span class="o">|</span>
</span><span class="line">          <span class="o">|</span>                <span class="o">|</span>
</span><span class="line">     <span class="o">+</span><span class="err">––––</span><span class="o">+</span><span class="err">–––––</span><span class="o">+</span>    <span class="o">+</span><span class="err">–––––</span><span class="o">+</span><span class="err">–––––</span><span class="o">+</span>
</span><span class="line">  <span class="o">+</span><span class="err">––</span><span class="o">+</span><span class="nx">BinOp</span><span class="o">:</span> <span class="s1">&#39;&amp;&#39;</span><span class="o">+</span><span class="err">–</span><span class="o">+</span>  <span class="o">|</span><span class="nx">Variable</span><span class="o">:</span> <span class="nx">z</span><span class="o">|</span>
</span><span class="line">  <span class="o">|</span>  <span class="o">+</span><span class="err">––––––––––</span><span class="o">+</span> <span class="o">|</span>  <span class="o">+</span><span class="err">–––––––––––</span><span class="o">+</span>
</span><span class="line">  <span class="o">|</span>               <span class="o">|</span>
</span><span class="line">  <span class="o">|</span>               <span class="o">|</span>
</span><span class="line">  <span class="o">|</span>               <span class="o">|</span>
</span><span class="line">  <span class="o">|</span>               <span class="o">|</span>
</span><span class="line"><span class="o">+</span><span class="err">–––––</span><span class="o">+</span><span class="err">–––––</span><span class="o">+</span>    <span class="o">+</span><span class="err">––––</span><span class="o">+</span><span class="err">–––––––––––––</span><span class="o">+</span>
</span><span class="line"><span class="o">|</span><span class="nx">Variable</span><span class="o">:</span> <span class="nx">x</span><span class="o">|</span>    <span class="o">|</span><span class="nx">BooleanLiteral</span><span class="o">:</span> <span class="nx">no</span><span class="o">|</span>
</span><span class="line"><span class="o">+</span><span class="err">–––––––––––</span><span class="o">+</span>    <span class="o">+</span><span class="err">––––––––––––––––––</span><span class="o">+</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Теперь по поводу того, почему это правило имеет именно такой вид.
Конечно же, мы могли бы сделать так:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="nx">expr</span>
</span><span class="line">  <span class="o">=</span> <span class="nx">expr</span> <span class="nx">op</span> <span class="nx">term</span>
</span><span class="line">  <span class="o">/</span> <span class="nx">term</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Однако это заставило бы парсер уйти в бесконечную рекурсию: парсер
видит правило <code>expr</code>, начинает сопоставлять выражение с первого
подвыражения (<code>expr</code>), в результате чего опять переходит на разбор
правила <code>expr</code>, и этот переход повторяется вновь и вновь. Такая
ситуация называется <em>левой рекурсией</em> (т. е., правила вида <code>a = a b</code>),
и некоторые генераторы парсеров могут самостоятельно разрешать такие
правила, однако PEG-парсеры к их числу не относятся.</p>

<p>Один из способов разрешить левую рекурсию — перейти к правой
рекурсии:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="nx">expr</span>
</span><span class="line">  <span class="o">=</span> <span class="nx">term</span> <span class="nx">op</span> <span class="nx">expr</span>
</span><span class="line">  <span class="o">/</span> <span class="nx">term</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>При этом возникает другая проблема — результирующее дерева
разбора растёт в сторону правой ветви, а не левой, что соответствует
правоассоциативным операторам (а не левоассоциативным, как у нас).
Иногда такое поведение и требуется изначально, но только не в нашем
случае.</p>

<h1 id="section-4">Заключение</h1>

<p>Данный пост не претендует на всеобъемлющий охват такой обширной темы,
как синтаксический анализ. Многие проблемы (классификация грамматик,
деревья разбора, абстрактные синтаксические деревья, левая рекурсия,
управление приоритетом и ассоциативностью операций и проч.) были
затронуты лишь поверхностно или вообще оставлены за кадром (во многом
по той причине, что я сам не достаточно хорошо владею описываемым
вопросом); для тех, кто хочет подробно ознакомиться с этими понятиями,
существует большое количество высококачественной литературы (список
которой, наверное, я когда-нибудь включу в этот пост).</p>

<p>Я же хотел продемонстрировать мощь генераторов парсеров (в данном
случае генератора PEG-парсера) в такой часто встречающейся задаче, как
разбор текста. Представленные в данном посте понятия и методики
позволяют при желании легко расширить наш язык выражений, добавив
новые операторы или даже управляющие конструкции.</p>

<h1 id="section-5">Демонстрация</h1>

<p>Для демонстрации я написал простую мордочку на Bootstrap и AngularJS:</p>

<p><small>
    Нажмите <a href="http://demos.smaximov.info/peg" target="_blank">сюда</a>,
    если iframe ниже не отображается.
</small></p>

<iframe src="http://demos.smaximov.info/peg" height="570" width="100%" style="border-radius: 5px; border: 1px #E0E0E0 groove">
    Your browser doesn&#8217;t support iframes, sorry :(
</iframe>

<h1 id="section-6">Ссылки</h1>

<ul>
  <li><a href="https://github.com/smaximov/expression-peg-example">Исходный код примера</a></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Поднимаем Discourse на Ubuntu Server 12.04]]></title>
    <link href="http://blog.smaximov.info/blog/2014/02/21/setting-up-discourse-on-ubuntu-server-12-dot-04/"/>
    <updated>2014-02-21T21:04:00+11:00</updated>
    <id>http://blog.smaximov.info/blog/2014/02/21/setting-up-discourse-on-ubuntu-server-12-dot-04</id>
    <content type="html"><![CDATA[<ul id="markdown-toc">
  <li><a href="#section">Введение</a></li>
  <li><a href="#section-1">Настройка сервера</a>    <ul>
      <li><a href="#section-2">Пререквизиты</a></li>
      <li><a href="#section-3">Создание нового пользователя</a></li>
      <li><a href="#ruby">Установка Ruby</a></li>
      <li><a href="#discourse">Получение исходников Discourse</a></li>
      <li><a href="#postgres--">Подготовка Postgres к использованию</a></li>
      <li><a href="#discourse-1">Конфигурация Discourse</a>        <ul>
          <li><a href="#discourseconf">discourse.conf</a></li>
        </ul>
      </li>
      <li><a href="#discourse-2">Инициализация Discourse</a></li>
      <li><a href="#nginx">Настройка nginx</a></li>
      <li><a href="#postfix">Настройка Postfix</a></li>
      <li><a href="#bluepill">Установка и настройка Bluepill</a></li>
    </ul>
  </li>
  <li><a href="#discourse-3">Обновление Discourse</a></li>
  <li><a href="#section-4">Заключение</a></li>
  <li><a href="#section-5">Ссылки</a></li>
  <li><a href="#update">Update</a></li>
</ul>

<h1 id="section">Введение</h1>

<p><a href="http://www.discourse.org">Discourse</a> — это молодой и активно
развивающийся opensource-форум<sup id="fnref:disc-platform"><a href="#fn:disc-platform" rel="footnote">1</a></sup>, одним из создателей которого является
широко известный в узких кругах программист и блоггер Jeff Atwood<sup id="fnref:atwood"><a href="#fn:atwood" rel="footnote">2</a></sup> a.k.a.
<a href="http://blog.codinghorror.com">codinghorror</a>.</p>

<p>Discourse отличается от традиционных форумов (прежде всего от phpBB,
vBulletin и их клонов) динамичностью, своим подходом к организации
обсуждений<sup id="fnref:organisation"><a href="#fn:organisation" rel="footnote">3</a></sup>, продвинутой системой уведомлений и
отслеживания сообщений, responsive-версткой и поддержной мобильных
браузеров. Ещё одно отличие от привычных форумов — ориентация на
community-модерацию, которая позволяет наиболее уважаемым и активным
участникам форума принимать участие в его управлении.</p>

<!-- more -->

<h1 id="section-1">Настройка сервера</h1>

<p>Использовался сервер со следующими характеристиками:</p>

<ul>
  <li>Ubuntu 12.04 LTS</li>
  <li>4 Xeon vCPU</li>
  <li>4GB ECC RAM</li>
  <li>60GB SSD</li>
</ul>

<h2 id="section-2">Пререквизиты</h2>

<p>Нам потребуется следующее ПО:</p>

<ul>
  <li>Postgres 9.1+ в качестве СУБД.</li>
  <li>Redis 2+ для кэша, job queue и пр.</li>
  <li>nginx в качестве вэб-сервера.</li>
  <li>Postfix в качестве почтового сервера.</li>
</ul>

<p>Дополнительное ПО:</p>

<ul>
  <li>git — для клонирования репозитория и управления кодом.</li>
  <li>make, g++ — для сборки gem native extensions.</li>
  <li>libxml2, libxslt, postgresql-server-dev-9.1 — зависимости при сборке.</li>
  <li>emacs — для редактирования конфигов.</li>
</ul>

<p>Установка проводится средствами пакетного менеджера.</p>

<h2 id="section-3">Создание нового пользователя</h2>

<p>Плохим тоном считается использование веб-сервисов из-под
рута, поэтому создадим нового пользователя и добавим его
в группу <strong>sudo</strong><sup id="fnref:sudo"><a href="#fn:sudo" rel="footnote">4</a></sup>:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">adduser --shell /bin/bash --gecos <span class="s1">&#39;&#39;</span> nameless
</span><span class="line">usermod -a -g sudo nameless
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Сменим текущего пользователя (<strong>root</strong>) на <strong>nameless</strong>:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">su - nameless
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><strong>Внимание</strong>: <em>все дальнейшие операции выполняются из-под пользователя <strong>nameless</strong>!</em></p>

<p>Также создадим директорию, в которой будет находится Discourse, и
дадим на неё права новому пользователю:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">sudo install -d -m 755 -o nameless -g nameless /var/www/discourse
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="ruby">Установка Ruby</h2>

<p>Бэкенд <strong>Discourse</strong> написан на <a href="https://www.ruby-lang.org/">Ruby</a> с
использованием вэб-фреймворка
<a href="http://rubyonrails.org/">Ruby on Rails</a>. Для установки Ruby я буду
использовать <a href="http://rvm.io/">RVM</a> — Ruby Version Manager.</p>

<p>Установка RVM в случае использовании Bash как shell’а по умолчанию
предельна проста:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">curl -sSL https://get.rvm.io | bash -s stable
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Далее, чтобы изменения вступили в силу, надо выполнить</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">. ~/.rvm/scripts/rvm
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>или перезапустить текущую сессию.</p>

<p>С помощью RVM установим последнюю на текущий момент версию Ruby:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="c"># установить Ruby 2.1.0</span>
</span><span class="line">rvm install 2.1.0
</span><span class="line"><span class="c"># использовать версию 2.1.0 по умолчанию</span>
</span><span class="line">rvm use 2.1.0 --default
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Также необходимо установить Bundler для управления зависимостями
gem’ов Discourse:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">gem install bundler
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="discourse">Получение исходников Discourse</h2>

<p>Склонируем репозиторий Discourse в заранее созданную директорию:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">git clone git://github.com/discourse/discourse.git /var/www/discourse
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Перейдём в эту директорию и установим необходимые зависимости:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nb">cd</span> /var/www/discourse/
</span><span class="line">bundle install
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="postgres--">Подготовка Postgres к использованию</h2>

<p>Добавим роль для текущего пользователя:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">sudo -u postgres createuser -s nameless
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Создадим базу данных:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">createdb discourse_prod
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="discourse-1">Конфигурация Discourse</h2>

<p>Перейдём в директорию <code>config</code> и скопируем шаблонные конфиги:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">cp discourse_quickstart.conf discourse.conf
</span><span class="line">cp discourse.pill.sample discourse.pill
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="discourseconf">discourse.conf</h3>

<p>Укажем имя хоста для форума:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="c"># hostname running the forum; i.e the external address of your form.</span>
</span><span class="line"><span class="nv">hostname</span> <span class="o">=</span> <span class="s2">&quot;grant.smaximov.info&quot;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Изменим настройки соединения с Postgres:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="c"># database name running discourse, in INSTALL-ubuntu this is discourse_prod</span>
</span><span class="line"><span class="nv">db_name</span> <span class="o">=</span> discourse_prod
</span><span class="line">
</span><span class="line"><span class="c"># host address for db server, uncomment if needed</span>
</span><span class="line"><span class="nv">db_host</span> <span class="o">=</span> localhost
</span><span class="line">
</span><span class="line"><span class="c"># port running db server, uncomment if needed</span>
</span><span class="line"><span class="c"># db_port = 5432</span>
</span><span class="line">
</span><span class="line"><span class="c"># username accessing database, if connecting remotely</span>
</span><span class="line"><span class="nv">db_username</span> <span class="o">=</span> nameless
</span><span class="line">
</span><span class="line"><span class="c"># password used to access the db, if connecting remotely</span>
</span><span class="line"><span class="nv">db_password</span> <span class="o">=</span> secret
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Настройки Redis можно оставить без изменения.</p>

<h2 id="discourse-2">Инициализация Discourse</h2>

<p>Выполним первоначальную миграцию базы данных и компиляцию
статических файлов:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">RAILS_ENV</span><span class="o">=</span>production bundle <span class="nb">exec </span>rake db:migrate
</span><span class="line"><span class="nv">RAILS_ENV</span><span class="o">=</span>production bundle <span class="nb">exec </span>rake assets:precompile
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="nginx">Настройка nginx</h2>

<p>Скопируем конфигурационные файлы из под обычного пользователя:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">sudo cp /var/www/discourse/config/nginx.global.conf /etc/nginx/conf.d/local-server.conf
</span><span class="line">sudo cp /var/www/discourse/config/nginx.sample.conf /etc/nginx/conf.d/discourse.conf
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Укажем имя сервера в <code>/etc/nginx.conf.d/discourse.conf</code>:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">server_name grant.smaximov.info;
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Осталось перезапустить nginx:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">sudo service nginx reload
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="postfix">Настройка Postfix</h2>

<p>В файле <code>/etc/hostname</code> укажем доменное имя сервера.</p>

<p>Для пересылки писем будем использовать <a href="mandrillapp.com">Mandrill</a>.
Создадим там учётную запись и сгенерируем для неё API KEY, добавив
ограничения: доступ только с IP сервера и типы сообщений <strong>send</strong>,
<strong>send-raw</strong>.</p>

<p>Создадим файл <code>/etc/postfix/sasl/passwd</code> со следующим содержимым</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="o">[</span>smtp.mandrillapp.com<span class="o">]</span> MANDRILL_ACCOUNT:API_KEY
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>где <code>MANDRILL_ACCOUNT</code> — учётная запись Mandrill, а <code>API_KEY</code> —
сгенерированный для неё API KEY.</p>

<p>Ограничим права на этот файл:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">sudo chmod 600 /etc/postfix/sasl/passwd
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Обновим настройки Postfix (эту команду следует выполнять при каждом
изменении файла):</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">sudo postmap /etc/postfix/sasl/passwd
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Отредактируем <code>/etc/postfix/main.cf</code>, настроив
<strong>sasl</strong>-аутентификацию:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">smtp_sasl_auth_enable</span> <span class="o">=</span> yes
</span><span class="line"><span class="nv">smtp_sasl_password_maps</span> <span class="o">=</span> <span class="nb">hash</span>:/etc/postfix/sasl/passwd
</span><span class="line"><span class="nv">smtp_sasl_security_options</span> <span class="o">=</span> noanonymous
</span><span class="line"><span class="nv">smtp_use_tls</span> <span class="o">=</span> yes
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Там же укажем релей:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">relayhost</span> <span class="o">=</span> <span class="o">[</span>smtp.mandrillapp.com<span class="o">]</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Перезапустим Postfix:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">sudo service postfix restart
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Теперь проверим работоспособность конфигурации:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">sendmail your.real.email@gmail.com
</span><span class="line">From: admin@smaximov.info
</span><span class="line">Subject: Test message from Postfix
</span><span class="line">Make sure that everything is OK.
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Если письмо не пришло, нужно смотреть <code>/var/log/syslog</code> на предмет
возможных проблем.</p>

<p>После этого можно проверить, отсылает ли Discourse почту. Для этого
нужно в админке Discourse перейти в <strong>Email</strong> → <strong>Settings</strong> и
отослать тестовое письмо на свой адрес.</p>

<h2 id="bluepill">Установка и настройка Bluepill</h2>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">gem install bluepill
</span><span class="line"><span class="nb">echo</span> <span class="s1">&#39;alias bluepill=&quot;NOEXEC_DISABLE=1 bluepill --no-privileged -c ~/.bluepill&quot;&#39;</span> &gt;&gt; ~/.bash_aliases
</span><span class="line">rvm wrapper <span class="k">$(</span>rvm current<span class="k">)</span> bootup bluepill
</span><span class="line">rvm wrapper <span class="k">$(</span>rvm current<span class="k">)</span> bootup bundle
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Запускаем Discourse:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">RUBY_GC_MALLOC_LIMIT</span><span class="o">=</span>90000000 <span class="nv">RAILS_ROOT</span><span class="o">=</span>/var/www/discourse <span class="se">\</span>
</span><span class="line">    <span class="nv">RAILS_ENV</span><span class="o">=</span>production <span class="nv">NUM_WEBS</span><span class="o">=</span>4 bluepill --no-privileged <span class="se">\</span>
</span><span class="line">    -c ~/.bluepill load /var/www/discourse/config/discourse.pill
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Добавляем эту же строку в crontab при <code>@reload</code>.</p>

<h1 id="discourse-3">Обновление Discourse</h1>

<p>Для обновления Discourse можно использовать следующий скрипт:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="c">#!/bin/bash</span>
</span><span class="line"><span class="c"># -*- mode: sh -*-</span>
</span><span class="line">
</span><span class="line"><span class="nv">DATESTAMP</span><span class="o">=</span><span class="k">$(</span><span class="nv">TZ</span><span class="o">=</span>UTC date +%F-%T<span class="k">)</span>
</span><span class="line"><span class="nv">BACKUP_DIR</span><span class="o">=</span><span class="s2">&quot;${HOME%%/}/backup&quot;</span>
</span><span class="line"><span class="nv">DISCOURSE_DIR</span><span class="o">=</span><span class="s2">&quot;/var/www/discourse&quot;</span>
</span><span class="line"><span class="nv">DISCOURSE_PARENT</span><span class="o">=</span><span class="s2">&quot;$(dirname ${DISCOURSE_DIR})&quot;</span>
</span><span class="line"><span class="nv">DISCOURSE_NAME</span><span class="o">=</span><span class="s2">&quot;$(basename ${DISCOURSE_DIR})&quot;</span>
</span><span class="line">
</span><span class="line">bluepill --no-privileged stop
</span><span class="line">bluepill --no-privileged quit
</span><span class="line">
</span><span class="line">mkdir -vp <span class="nv">$BACKUP_DIR</span>
</span><span class="line">pg_dump --no-owner --clean discourse_prod | gzip -c &gt; <span class="s2">&quot;${BACKUP_DIR}/discourse-db-${DATESTAMP}.sql.gz&quot;</span>
</span><span class="line">tar cfz <span class="s2">&quot;${BACKUP_DIR}/discourse-dir-${DATESTAMP}.tar.gz&quot;</span> -C <span class="nv">$DISCOURSE_PARENT</span> <span class="nv">$DISCOURSE_NAME</span>
</span><span class="line">
</span><span class="line"><span class="nb">cd</span> <span class="nv">$DISCOURSE_DIR</span>
</span><span class="line">git checkout master
</span><span class="line">git pull origin master
</span><span class="line">git fetch --tags
</span><span class="line">
</span><span class="line">bundle install --without <span class="nb">test</span> --deployment
</span><span class="line"><span class="nv">RUBY_GC_MALLOC_LIMIT</span><span class="o">=</span>90000000 <span class="nv">RAILS_ENV</span><span class="o">=</span>production bundle <span class="nb">exec </span>rake db:migrate
</span><span class="line"><span class="nv">RUBY_GC_MALLOC_LIMIT</span><span class="o">=</span>90000000 <span class="nv">RAILS_ENV</span><span class="o">=</span>production bundle <span class="nb">exec </span>rake assets:precompile
</span><span class="line">
</span><span class="line"><span class="nb">eval</span> <span class="s2">&quot;$(crontab -l | sed -e &#39;/^#/d&#39; -e &#39;s/^@reboot //&#39;)&quot;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h1 id="section-4">Заключение</h1>

<p>Вот мы и получили работающий экземпляр Discourse. Что можно сделать
дальше?</p>

<ul>
  <li>
    <p>Настроить сайт под себя. Выбор опций для настройки достаточно велик:
от локали по умолчанию до параметров аутентификации и авторизации.</p>
  </li>
  <li>
    <p>Изменить внешний вид сайта: написать кастомные стили…</p>
  </li>
  <li>
    <p>Заняться начальным наполнением сайта.</p>
  </li>
  <li>
    <p>…</p>
  </li>
</ul>

<h1 id="section-5">Ссылки</h1>

<ul>
  <li>
    <p><a href="http://www.discourse.org/">Discourse Homepage</a></p>
  </li>
  <li>
    <p><a href="http://github.com/discourse/discourse">Discourse GitHub Repo</a></p>
  </li>
  <li>
    <p><a href="https://github.com/discourse/discourse/blob/master/docs/INSTALL-ubuntu.md">Official Discource Install Guide</a></p>
  </li>
</ul>

<h1 id="update">Update</h1>

<p>Тем временем не так давно появилось
<a href="https://github.com/discourse/discourse/blob/master/docs/INSTALL-digital-ocean.md">руководство</a>
по поднятию Discourse с помощью образа <a href="https://www.docker.io/">Docker</a>.</p>

<div class="footnotes">
  <ol>
    <li id="fn:disc-platform">
      <p>…или Discussion Platform, как называют его авторы<a href="#fnref:disc-platform" rel="reference">&#8617;</a></p>
    </li>
    <li id="fn:atwood">
      <p><a href="https://stackoverflow.com">StackOverflow</a> и <a href="https://stackexchange.com">StackExchange</a> — тоже его рук дело<a href="#fnref:atwood" rel="reference">&#8617;</a></p>
    </li>
    <li id="fn:organisation">
      <p>группировка по тегам вместо подфорумов, отсутствие разделения топиков на страницы<a href="#fnref:organisation" rel="reference">&#8617;</a></p>
    </li>
    <li id="fn:sudo">
      <p>Это даст возможность использовать утилиту sudo без необходимости править файл <code>/etc/sudoers</code><a href="#fnref:sudo" rel="reference">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Automatic Resource Management in Scala]]></title>
    <link href="http://blog.smaximov.info/blog/2013/11/29/automatic-resource-management-in-scala/"/>
    <updated>2013-11-29T14:09:00+11:00</updated>
    <id>http://blog.smaximov.info/blog/2013/11/29/automatic-resource-management-in-scala</id>
    <content type="html"><![CDATA[<ul id="markdown-toc">
  <li><a href="#section">Введение</a></li>
  <li><a href="#section-1">Решение</a>    <ul>
      <li><a href="#section-2">Первое приближение</a></li>
      <li><a href="#section-3">Обобщённый статический метод</a></li>
      <li><a href="#implicits">Implicits</a></li>
    </ul>
  </li>
</ul>

<h1 id="section">Введение</h1>

<p>Решал вчера задание NodeScala для курса реактивного программирования
на Scala<sup id="fnref:rx"><a href="#fn:rx" rel="footnote">1</a></sup>. Часть задания состояла в реализации <em>trait</em>
<code>Exchange</code>, содержащего методы <code>write</code> и <code>close</code>. Метод <code>write</code>
выполнял запись строки в ответ (<em>response</em>) сервера, а метод
<code>close</code> закрывал объект после использования. В инструкции к заданию
было обращено особое внимание на необходимость закрытия объекта:</p>

<blockquote>
  <p>The trait <code>Exchange</code> is used to write your response back to the user using the <code>write</code> method. Whenever you use it, don’t forget to close it by calling the <code>close</code> method.</p>
</blockquote>

<p>Как можно догадаться, в конце концов именно это я и забыл сделать. В
результате около часа было потрачено на поиск ошибки. Это навело меня
на мысль, что было бы неплохо воспользоваться богатыми возможностями
Scala для реализации автоматического управления ресурсами (готовые
решения меня по понятной причине не интересовали).</p>

<!-- more -->

<h1 id="section-1">Решение</h1>

<p>Наиболее логичное решение, которое пришло мне в голову: написать
метод, который будет принимать блок кода, выполнять его, а затем
закрывать объект.</p>

<h2 id="section-2">Первое приближение</h2>

<p>Сначала я реализовал этот метод внутри <code>Exchange</code>:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="scala"><span class="line">  <span class="k">def</span> <span class="n">closeAfter</span><span class="o">(</span><span class="n">block</span><span class="k">:</span> <span class="o">=&gt;</span> <span class="nc">Unit</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">    <span class="k">try</span> <span class="n">block</span>
</span><span class="line">    <span class="k">finally</span> <span class="n">close</span><span class="o">()</span>
</span><span class="line">  <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Теперь <code>Exchange</code> можно использовать так:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="scala"><span class="line">  <span class="k">val</span> <span class="n">x</span><span class="k">:</span> <span class="kt">Exchange</span> <span class="o">=</span> <span class="nc">Exchange</span><span class="o">()</span>
</span><span class="line">
</span><span class="line">  <span class="n">x</span> <span class="n">closeAfter</span> <span class="o">{</span>
</span><span class="line">    <span class="n">x</span> <span class="n">write</span> <span class="s">&quot;foo&quot;</span>
</span><span class="line">  <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Недостаток такого решения очевиден: оно не универсально. Для другого
класса (трейта) нужно будет заново писать такой метод.</p>

<h2 id="section-3">Обобщённый статический метод</h2>

<p>Создадим объект <code>Managed</code>, который определяет метод <code>using</code>,
который принимает объект с методом <code>close</code> и закрывает его после того,
как выполнит блок.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="scala"><span class="line"><span class="k">object</span> <span class="nc">Managed</span> <span class="o">{</span>
</span><span class="line">  <span class="k">type</span> <span class="kt">Closable</span> <span class="o">=</span> <span class="o">{</span> <span class="k">def</span> <span class="n">close</span><span class="o">()</span><span class="k">:</span> <span class="kt">Unit</span> <span class="o">}</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="n">using</span><span class="o">[</span><span class="kt">U</span><span class="o">](</span><span class="n">that</span><span class="k">:</span> <span class="kt">Closable</span><span class="o">)(</span><span class="n">block</span><span class="k">:</span> <span class="o">=&gt;</span> <span class="n">U</span><span class="o">)</span><span class="k">:</span> <span class="kt">U</span> <span class="o">=</span> <span class="o">{</span>
</span><span class="line">    <span class="k">try</span> <span class="n">block</span>
</span><span class="line">    <span class="k">finally</span> <span class="n">that</span><span class="o">.</span><span class="n">close</span><span class="o">()</span>
</span><span class="line">  <span class="o">}</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Использование метода:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="scala"><span class="line">  <span class="k">import</span> <span class="nn">Managed.using</span>
</span><span class="line">  <span class="k">val</span> <span class="n">x</span><span class="k">:</span> <span class="kt">Exchange</span> <span class="o">=</span> <span class="nc">Exchange</span><span class="o">()</span>
</span><span class="line">
</span><span class="line">  <span class="n">using</span><span class="o">(</span><span class="n">x</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">    <span class="n">x</span> <span class="n">write</span> <span class="s">&quot;foo&quot;</span>
</span><span class="line">  <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Теперь мы можем работать со всеми классами, у которых есть метод
<code>close</code>.</p>

<p>Но что делать, если у некоторого класса этот метод называется
по-другому? Тут на помощь приходят <em>imlicit conversions</em>.</p>

<h2 id="implicits">Implicits</h2>

<p>Допустим, вместо метода <code>close</code> трейт <code>Exchange</code> предоставляет метод
<code>cleanup</code>. Создадим <em>trait</em> <code>Managed</code>, для которого определим метод
<code>using</code> в соответствующем companion-объекте:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
</pre></td><td class="code"><pre><code class="scala"><span class="line"><span class="k">trait</span> <span class="nc">Managed</span><span class="o">[</span><span class="kt">T</span><span class="o">]</span> <span class="o">{</span>
</span><span class="line">  <span class="k">def</span> <span class="n">onClose</span><span class="o">()</span><span class="k">:</span> <span class="kt">Unit</span>
</span><span class="line"><span class="o">}</span>
</span><span class="line">
</span><span class="line"><span class="k">object</span> <span class="nc">Managed</span> <span class="o">{</span>
</span><span class="line">  <span class="c1">// ...</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="n">using</span><span class="o">[</span><span class="kt">T</span>, <span class="kt">U</span><span class="o">](</span><span class="n">that</span><span class="k">:</span> <span class="kt">Managed</span><span class="o">[</span><span class="kt">T</span><span class="o">])(</span><span class="n">block</span><span class="k">:</span> <span class="o">=&gt;</span> <span class="n">U</span><span class="o">)</span><span class="k">:</span> <span class="kt">U</span> <span class="o">=</span> <span class="o">{</span>
</span><span class="line">    <span class="k">try</span> <span class="n">block</span>
</span><span class="line">    <span class="k">finally</span> <span class="n">that</span><span class="o">.</span><span class="n">onClose</span><span class="o">()</span>
</span><span class="line">  <span class="o">}</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Определим управляемый класс для <code>Exchange</code> и функцию неявного преобразования:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="scala"><span class="line"><span class="k">class</span> <span class="nc">ManagedExchange</span><span class="o">(</span><span class="n">exchange</span><span class="k">:</span> <span class="kt">Exchange</span><span class="o">)</span> <span class="k">extends</span> <span class="nc">Managed</span><span class="o">[</span><span class="kt">Exchange</span><span class="o">]</span> <span class="o">{</span>
</span><span class="line">  <span class="k">def</span> <span class="n">onClose</span><span class="o">()</span> <span class="o">{</span>
</span><span class="line">    <span class="n">exchange</span><span class="o">.</span><span class="n">cleanup</span><span class="o">()</span>
</span><span class="line">  <span class="o">}</span>
</span><span class="line"><span class="o">}</span>
</span><span class="line">
</span><span class="line"><span class="k">object</span> <span class="nc">ExchangeImplicits</span> <span class="o">{</span>
</span><span class="line">  <span class="k">implicit</span> <span class="k">def</span> <span class="nc">Exchange2Managed</span><span class="o">(</span><span class="n">e</span><span class="k">:</span> <span class="kt">Exchange</span><span class="o">)</span> <span class="k">=</span> <span class="k">new</span> <span class="nc">ManagedExchange</span><span class="o">(</span><span class="n">e</span><span class="o">)</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Осталось только добавить импорт неявных преобразований, определённых в
<code>ExchangeImplicits</code>:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="scala"><span class="line">  <span class="k">import</span> <span class="nn">Managed.using</span>
</span><span class="line">  <span class="k">import</span> <span class="nn">ExchangeImplicits._</span>
</span><span class="line">  <span class="k">val</span> <span class="n">x</span><span class="k">:</span> <span class="kt">Exchange</span> <span class="o">=</span> <span class="nc">Exchange</span><span class="o">()</span>
</span><span class="line">
</span><span class="line">  <span class="n">using</span><span class="o">(</span><span class="n">x</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">    <span class="n">x</span> <span class="n">write</span> <span class="s">&quot;foo&quot;</span>
</span><span class="line">  <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<div class="footnotes">
  <ol>
    <li id="fn:rx">
      <p><a href="https://class.coursera.org/reactive-001/class/index">Principles of Reactive Programming</a> by Erik Mejer, Martin Odersky, Roland Kuhn на <a href="http://coursera.org" title="Coursera">Coursera</a><a href="#fnref:rx" rel="reference">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Kramdown в качестве процессора Markdown]]></title>
    <link href="http://blog.smaximov.info/blog/2013/06/26/switching-markdown-processor-to-kramdown/"/>
    <updated>2013-06-26T18:57:00+11:00</updated>
    <id>http://blog.smaximov.info/blog/2013/06/26/switching-markdown-processor-to-kramdown</id>
    <content type="html"><![CDATA[<p>Перевёл обработку Markdown на <a href="http://kramdown.rubyforge.org/index.html">Kramdown</a>. Что это (пока)
дало: сноски и генерацию содержания. Стили для них взял (с небольшими
изменениями)
<a href="http://hiltmon.com/blog/2013/05/08/octopress-now-has-footnotes/">отсюда</a>
и
<a href="http://blog.riemann.cc/2013/04/10/table-of-contents-in-octopress/">отсюда</a>:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>sass/custom/_styles.scss</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
</pre></td><td class="code"><pre><code class="scss"><span class="line"><span class="nn">#markdown-toc</span><span class="nd">:before</span> <span class="p">{</span>
</span><span class="line">   <span class="na">content</span><span class="o">:</span> <span class="s2">&quot;Содержание&quot;</span><span class="p">;</span>
</span><span class="line">   <span class="na">font-weight</span><span class="o">:</span> <span class="no">bold</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line"><span class="nt">ul</span><span class="nn">#markdown-toc</span> <span class="p">{</span>
</span><span class="line">   <span class="na">list-style</span><span class="o">:</span> <span class="no">none</span><span class="p">;</span>
</span><span class="line">   <span class="na">float</span><span class="o">:</span> <span class="no">right</span><span class="p">;</span>
</span><span class="line">   <span class="k">@include</span><span class="nd"> shadow-box</span><span class="p">;</span>
</span><span class="line">   <span class="na">background-color</span><span class="o">:</span> <span class="nb">white</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="nc">.blog-index</span> <span class="p">{</span>
</span><span class="line">   <span class="nn">#markdown-toc</span><span class="o">,</span> <span class="nt">sup</span><span class="o">[</span><span class="nt">id</span><span class="o">^=</span><span class="nt">fnref</span><span class="o">],</span> <span class="nc">.footnotes</span> <span class="p">{</span>
</span><span class="line">      <span class="na">display</span><span class="o">:</span> <span class="no">none</span><span class="p">;</span>
</span><span class="line">   <span class="p">}</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="nc">.footnotes</span> <span class="p">{</span>
</span><span class="line">   <span class="na">font-size</span><span class="o">:</span> <span class="mi">13</span><span class="kt">px</span><span class="p">;</span>
</span><span class="line">   <span class="na">line-height</span><span class="o">:</span> <span class="mi">16</span><span class="kt">px</span><span class="p">;</span>
</span><span class="line">   <span class="na">color</span><span class="o">:</span> <span class="mh">#666</span><span class="p">;</span>
</span><span class="line">   <span class="na">border-top</span><span class="o">:</span> <span class="mi">2</span><span class="kt">px</span> <span class="no">groove</span> <span class="nb">gray</span><span class="p">;</span>
</span><span class="line">   <span class="na">padding-top</span><span class="o">:</span> <span class="mi">1</span><span class="kt">em</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">   <span class="nt">ol</span> <span class="p">{</span>
</span><span class="line">      <span class="na">padding-left</span><span class="o">:</span> <span class="mi">2</span><span class="kt">em</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">      <span class="nt">p</span> <span class="p">{</span>
</span><span class="line">         <span class="na">margin-bottom</span><span class="o">:</span> <span class="mi">6</span><span class="kt">px</span><span class="p">;</span>
</span><span class="line">      <span class="p">}</span>
</span><span class="line">   <span class="p">}</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Для вставки содержания в тело поста нужно добавить атрибут <code>toc</code> к
элементу списка, например:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="text"><span class="line">* TOC
</span><span class="line">{:toc}
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Простановка сносок похоже на простановку ссылок-сносок:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="text"><span class="line">This is a text[^fn] with footnotes.
</span><span class="line">
</span><span class="line">...
</span><span class="line">
</span><span class="line">[^fn]: footnote text.
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>В квадратных скобках с “птичкой” (caret) указывается идентификатор
сноски, который должен быть уникальным в пределах одного документа.
Идентификатор может состоять из цифр и букв. Текст сноски
задается где-нибудь в документе через двоеточие.</p>

<hr />

<p>Kramdown содержит кучю других расширений Markdown, их описание есть на
<a href="http://kramdown.rubyforge.org/syntax.html">сайте</a>.</p>

<p>Результат мне понравился (примечательно, что этот пост не содержит ни
содержания, ни сносок).</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Добавление категорий к заголовку поста]]></title>
    <link href="http://blog.smaximov.info/blog/2013/06/25/add-categories-to-post-title/"/>
    <updated>2013-06-25T22:14:00+11:00</updated>
    <id>http://blog.smaximov.info/blog/2013/06/25/add-categories-to-post-title</id>
    <content type="html"><![CDATA[<p>Решил вот немного изменить внешний вид блога и заодно разобраться в
расположении и назначении стилевых файлов и шаблонов HTML в
Octorpess/Jekyll.</p>

<p>Изменения затрагивают подзаголовок поста, к которому я решил добавить
список категорий. Шаблон списка категорий располагается в файле
<code>source/_includes/post/categories.html</code>. Этот шаблон, соответственно,
следует включить в шаблон <code>source/_includes/article.html</code> с помощью
тега Liquid <code>include</code>:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="html"><span class="line">  ...
</span><span class="line">  <span class="nt">&lt;p</span> <span class="na">class=</span><span class="s">&quot;meta&quot;</span><span class="nt">&gt;</span>
</span><span class="line">    {% include post/date.html %}{{ time }}
</span><span class="line">    {% if site.disqus_short_name and page.comments != false and post.comments != false and site.disqus_show_comment_count == true %}
</span><span class="line">     | <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;{% if index %}{{ root_url }}{{ post.url }}{% endif %}#disqus_thread&quot;</span><span class="nt">&gt;</span>Comments<span class="nt">&lt;/a&gt;</span>
</span><span class="line">    {% endif %}
</span><span class="line">    {% include post/categories.html %}
</span><span class="line">  <span class="nt">&lt;/p&gt;</span>
</span><span class="line">  ...
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>И немного CSS в <code>sass/custom/_styles.scss</code>:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
</pre></td><td class="code"><pre><code class="scss"><span class="line"><span class="nt">article</span> <span class="o">&gt;</span> <span class="nt">header</span> <span class="nt">p</span><span class="nc">.meta</span> <span class="p">{</span>
</span><span class="line">    <span class="nt">span</span><span class="nc">.categories</span> <span class="p">{</span>
</span><span class="line">       <span class="na">text-transform</span><span class="o">:</span> <span class="no">none</span><span class="p">;</span>
</span><span class="line">       <span class="nt">a</span><span class="nc">.category</span> <span class="p">{</span>
</span><span class="line">          <span class="k">@extend</span> <span class="nc">.serif</span><span class="o">;</span>
</span><span class="line">          <span class="nt">font-size</span><span class="nd">:</span> <span class="nt">1em</span><span class="o">;</span>
</span><span class="line">          <span class="k">&amp;</span><span class="nd">:hover</span><span class="o">,</span> <span class="k">&amp;</span><span class="nd">:link</span><span class="o">,</span> <span class="k">&amp;</span><span class="nd">:visited</span><span class="o">,</span> <span class="k">&amp;</span><span class="nd">:active</span> <span class="p">{</span>
</span><span class="line">             <span class="na">text-decoration</span><span class="o">:</span> <span class="no">none</span><span class="p">;</span>
</span><span class="line">             <span class="na">color</span><span class="o">:</span> <span class="nv">$text-color-light</span><span class="p">;</span>
</span><span class="line">          <span class="p">}</span>
</span><span class="line">       <span class="p">}</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">
</span><span class="line">   <span class="nc">.separator</span> <span class="p">{</span>
</span><span class="line">      <span class="na">color</span><span class="o">:</span> <span class="nf">darken</span><span class="p">(</span><span class="nv">$text-color-light</span><span class="o">,</span> <span class="mi">15</span><span class="p">);</span>
</span><span class="line">   <span class="p">}</span>
</span><span class="line">   <span class="nt">time</span> <span class="o">+</span> <span class="nn">#disqus_thread</span><span class="nd">:before</span><span class="o">,</span> <span class="nt">time</span> <span class="o">+</span> <span class="nc">.categories</span><span class="nd">:before</span><span class="o">,</span> <span class="nn">#disqus_thread</span> <span class="o">+</span> <span class="nc">.categories</span><span class="nd">:before</span> <span class="p">{</span>
</span><span class="line">      <span class="k">@extend</span> <span class="nc">.separator</span><span class="o">;</span>
</span><span class="line">   <span class="p">}</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Вуаля!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Генерация PDF с помощью Prawn]]></title>
    <link href="http://blog.smaximov.info/blog/2013/06/21/generating-pdf-in-rails-with-prawn/"/>
    <updated>2013-06-21T18:17:00+11:00</updated>
    <id>http://blog.smaximov.info/blog/2013/06/21/generating-pdf-in-rails-with-prawn</id>
    <content type="html"><![CDATA[<ul id="markdown-toc">
  <li><a href="#section">Введение</a></li>
  <li><a href="#section-1">Установка и настройка</a></li>
  <li><a href="#section-2">Использование</a></li>
  <li><a href="#section-3">Заключение</a></li>
</ul>

<h1 id="section">Введение</h1>

<p>Динамическое создание PDF — довольно распространенное задача.
Для Ruby существует несколько библиотек для генерации с PDF-файлов,
вот некоторые из них:</p>

<ul>
  <li>
    <p><a href="https://github.com/pdfkit/pdfkit">PDFkit</a> — библиотека для конвертации HTML в PDF. Использует
shell-утилиту <a href="http://code.google.com/p/wkhtmltopdf/">wkhtmltopdf</a>, которая, в свою очередь,
использует webkit в качестве движка рендеринга;</p>
  </li>
  <li>
    <p><a href="https://github.com/mileszs/wicked_pdf">Wicked pdf</a> — тоже конвертация HTML → PDF,
тоже <a href="http://code.google.com/p/wkhtmltopdf/">wkhtmltopdf</a>;</p>
  </li>
  <li>
    <p><a href="https://github.com/fnando/kitabu">Kitabu</a> — генерация PDF и e-Pub из Textile, Markdown
или HTML;</p>
  </li>
  <li>
    <p><a href="http://prawn.majesticseacreature.com/">Prawn</a> — библиотека для создания PDF-файлов,
написанная на чистом Ruby.</p>
  </li>
</ul>

<p>Таким образом, видны две тенденции: генерация PDF из какого-нибудь
языка разметки либо использование DSL для генерации.</p>

<p>Мой выбор пал на Prawn, о нем и будет рассказано в остальной части
поста.</p>

<!-- more -->

<h1 id="section-1">Установка и настройка</h1>

<p>Установка проста: добавьте следующую строку в <code>Gemfile</code>:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="n">gem</span> <span class="s1">&#39;prawn&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Затем нужно добавить в <code>config/application.rb</code> автозагрузку файлов из
директории <code>/app/pdfs/</code>, в которой мы будем хранить классы, создающие
PDF-файлы:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">module</span> <span class="nn">Biotriz</span>
</span><span class="line">  <span class="k">class</span> <span class="nc">Application</span> <span class="o">&lt;</span> <span class="ss">Rails</span><span class="p">:</span><span class="ss">:Application</span>
</span><span class="line">    <span class="n">config</span><span class="o">.</span><span class="n">autoload_paths</span> <span class="o">&lt;&lt;</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="no">Rails</span><span class="o">.</span><span class="n">root</span><span class="si">}</span><span class="s2">/app/pdfs&quot;</span>
</span><span class="line">    <span class="c1"># ... skipped ...</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Далее зарегистрируем Mime-тип <code>:pdf</code> в
<code>/config/initializers/mime_types.rb</code>:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="ss">Mime</span><span class="p">:</span><span class="ss">:Type</span><span class="o">.</span><span class="n">register</span> <span class="s1">&#39;application/pdf&#39;</span><span class="p">,</span> <span class="ss">:pdf</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Это позволит нам указывать тип <code>:pdf</code> в методе <code>send_data</code>, а также
использовать его в блоке <code>respond_to</code>.</p>

<h1 id="section-2">Использование</h1>

<p>Код класса, создающего PDF:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>app/pdfs/search_results.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
<span class="line-number">51</span>
<span class="line-number">52</span>
<span class="line-number">53</span>
<span class="line-number">54</span>
<span class="line-number">55</span>
<span class="line-number">56</span>
<span class="line-number">57</span>
<span class="line-number">58</span>
<span class="line-number">59</span>
<span class="line-number">60</span>
<span class="line-number">61</span>
<span class="line-number">62</span>
<span class="line-number">63</span>
<span class="line-number">64</span>
<span class="line-number">65</span>
<span class="line-number">66</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="c1"># encoding: utf-8</span>
</span><span class="line">
</span><span class="line"><span class="nb">require</span> <span class="s2">&quot;prawn/measurement_extensions&quot;</span>
</span><span class="line">
</span><span class="line"><span class="k">class</span> <span class="nc">SearchResults</span> <span class="o">&lt;</span> <span class="ss">Prawn</span><span class="p">:</span><span class="ss">:Document</span>
</span><span class="line">  <span class="kp">include</span> <span class="no">Rails</span><span class="o">.</span><span class="n">application</span><span class="o">.</span><span class="n">routes</span><span class="o">.</span><span class="n">url_helpers</span>
</span><span class="line">  <span class="kp">include</span> <span class="ss">ActionDispatch</span><span class="p">:</span><span class="ss">:Routing</span><span class="o">::</span><span class="no">PolymorphicRoutes</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">query</span><span class="p">,</span> <span class="n">entries</span><span class="p">,</span> <span class="n">host</span><span class="p">)</span>
</span><span class="line">    <span class="k">super</span><span class="p">()</span>
</span><span class="line">    <span class="n">pad</span><span class="p">(</span><span class="mi">20</span><span class="p">)</span> <span class="k">do</span>
</span><span class="line">      <span class="n">font</span><span class="p">(</span><span class="s2">&quot;Helvetica&quot;</span><span class="p">,</span> <span class="ss">size</span><span class="p">:</span> <span class="mi">20</span><span class="p">,</span> <span class="ss">style</span><span class="p">:</span> <span class="ss">:bold</span><span class="p">)</span> <span class="k">do</span>
</span><span class="line">        <span class="n">text</span> <span class="s2">&quot;Search Results (</span><span class="si">#{</span><span class="no">Time</span><span class="o">.</span><span class="n">zone</span><span class="o">.</span><span class="n">now</span><span class="o">.</span><span class="n">strftime</span><span class="p">(</span><span class="s1">&#39;%d/%m/%Y %H:%M&#39;</span><span class="p">)</span><span class="si">}</span><span class="s2">)&quot;</span>
</span><span class="line">      <span class="k">end</span>
</span><span class="line">    <span class="k">end</span>
</span><span class="line">
</span><span class="line">    <span class="n">pad_bottom</span><span class="p">(</span><span class="mi">20</span><span class="p">)</span> <span class="k">do</span>
</span><span class="line">      <span class="n">font</span><span class="p">(</span><span class="s2">&quot;Helvetica&quot;</span><span class="p">,</span> <span class="ss">size</span><span class="p">:</span> <span class="mi">14</span><span class="p">,</span> <span class="ss">style</span><span class="p">:</span> <span class="ss">:bold</span><span class="p">)</span> <span class="k">do</span>
</span><span class="line">        <span class="n">pad_bottom</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span> <span class="k">do</span>
</span><span class="line">          <span class="n">text</span> <span class="s2">&quot;Search Query&quot;</span>
</span><span class="line">        <span class="k">end</span>
</span><span class="line">      <span class="k">end</span>
</span><span class="line">
</span><span class="line">      <span class="n">query_output</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class="line">      <span class="n">first</span> <span class="o">=</span> <span class="kp">false</span>
</span><span class="line">
</span><span class="line">      <span class="n">query</span><span class="o">.</span><span class="n">try</span><span class="p">(</span><span class="ss">:each</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">item</span><span class="o">|</span>
</span><span class="line">        <span class="n">color</span> <span class="o">=</span> <span class="n">item</span><span class="o">[</span><span class="ss">:color</span><span class="o">][</span><span class="mi">1</span><span class="o">.</span><span class="n">.</span><span class="o">-</span><span class="mi">1</span><span class="o">]</span>
</span><span class="line">        <span class="n">cls</span> <span class="o">=</span> <span class="n">item</span><span class="o">[</span><span class="ss">:model</span><span class="o">].</span><span class="n">classify</span><span class="o">.</span><span class="n">constantize</span>
</span><span class="line">
</span><span class="line">        <span class="n">item</span><span class="o">[</span><span class="ss">:values</span><span class="o">].</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">value</span><span class="o">|</span>
</span><span class="line">          <span class="n">query_output</span> <span class="o">&lt;&lt;</span> <span class="p">{</span>
</span><span class="line">            <span class="ss">text</span><span class="p">:</span> <span class="s2">&quot;[</span><span class="si">#{</span><span class="n">value</span><span class="o">.</span><span class="n">title</span><span class="si">}</span><span class="s2">]&quot;</span><span class="p">,</span>
</span><span class="line">            <span class="ss">link</span><span class="p">:</span> <span class="n">polymorphic_url</span><span class="p">(</span><span class="n">value</span><span class="p">,</span> <span class="ss">host</span><span class="p">:</span> <span class="n">host</span><span class="p">)</span>
</span><span class="line">          <span class="p">}</span>
</span><span class="line">
</span><span class="line">          <span class="k">if</span> <span class="ow">not</span> <span class="n">first</span>
</span><span class="line">            <span class="n">query_output</span> <span class="o">&lt;&lt;</span> <span class="p">{</span> <span class="ss">text</span><span class="p">:</span> <span class="s2">&quot;   &quot;</span> <span class="p">}</span>
</span><span class="line">            <span class="n">first</span> <span class="o">=</span> <span class="kp">false</span>
</span><span class="line">          <span class="k">end</span>
</span><span class="line">        <span class="k">end</span>
</span><span class="line">      <span class="k">end</span>
</span><span class="line">
</span><span class="line">      <span class="n">formatted_text</span> <span class="n">query_output</span><span class="p">,</span> <span class="ss">leading</span><span class="p">:</span> <span class="mi">10</span>
</span><span class="line">    <span class="k">end</span>
</span><span class="line">
</span><span class="line">    <span class="n">pad_bottom</span><span class="p">(</span><span class="mi">20</span><span class="p">)</span> <span class="k">do</span>
</span><span class="line">      <span class="n">font</span><span class="p">(</span><span class="s2">&quot;Helvetica&quot;</span><span class="p">,</span> <span class="ss">size</span><span class="p">:</span> <span class="mi">14</span><span class="p">,</span> <span class="ss">style</span><span class="p">:</span> <span class="ss">:bold</span><span class="p">)</span> <span class="k">do</span>
</span><span class="line">        <span class="n">pad_bottom</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span> <span class="k">do</span>
</span><span class="line">          <span class="n">text</span> <span class="s2">&quot;Search Results&quot;</span>
</span><span class="line">        <span class="k">end</span>
</span><span class="line">      <span class="k">end</span>
</span><span class="line">      <span class="n">entries</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">entry</span><span class="o">|</span>
</span><span class="line">        <span class="n">pad_bottom</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span> <span class="k">do</span>
</span><span class="line">          <span class="n">font</span><span class="p">(</span><span class="s2">&quot;Helvetica&quot;</span><span class="p">,</span> <span class="ss">style</span><span class="p">:</span> <span class="ss">:bold</span><span class="p">)</span> <span class="k">do</span>
</span><span class="line">            <span class="n">formatted_text</span> <span class="o">[</span><span class="p">{</span><span class="ss">text</span><span class="p">:</span> <span class="n">entry</span><span class="o">.</span><span class="n">title</span><span class="p">,</span> <span class="ss">link</span><span class="p">:</span> <span class="n">polymorphic_url</span><span class="p">(</span><span class="n">entry</span><span class="p">,</span> <span class="ss">host</span><span class="p">:</span> <span class="n">host</span><span class="p">)}</span><span class="o">]</span>
</span><span class="line">          <span class="k">end</span>
</span><span class="line">        <span class="k">end</span>
</span><span class="line">
</span><span class="line">        <span class="n">pad_bottom</span><span class="p">(</span><span class="mi">15</span><span class="p">)</span> <span class="k">do</span>
</span><span class="line">          <span class="n">text</span> <span class="n">entry</span><span class="o">.</span><span class="n">description</span><span class="p">,</span> <span class="n">indent_paragraphs</span><span class="p">:</span> <span class="mi">1</span><span class="o">.</span><span class="mi">5</span><span class="o">.</span><span class="n">cm</span>
</span><span class="line">        <span class="k">end</span>
</span><span class="line">      <span class="k">end</span>
</span><span class="line">    <span class="k">end</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Особо комментировать этот код не буду, как по мне, он говорит сам за
себя; желающие могут обратиться к документации <a href="http://prawn.majesticseacreature.com/">на сайте</a>, там
же есть мануал.</p>

<p>Код действия, формирующего и отсылающего PDF-файл клиенту:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line">  <span class="k">def</span> <span class="nf">save</span>
</span><span class="line">    <span class="n">respond_to</span> <span class="k">do</span> <span class="o">|</span><span class="nb">format</span><span class="o">|</span>
</span><span class="line">      <span class="c1"># ... skipped ...</span>
</span><span class="line">      <span class="nb">format</span><span class="o">.</span><span class="n">pdf</span> <span class="k">do</span>
</span><span class="line">        <span class="n">query</span> <span class="o">=</span> <span class="n">restore_query</span> <span class="n">params</span><span class="o">[</span><span class="ss">:query</span><span class="o">]</span>
</span><span class="line">        <span class="n">reverted_query</span> <span class="o">=</span> <span class="n">revert_query</span> <span class="ss">query</span><span class="p">:</span> <span class="n">query</span>
</span><span class="line">        <span class="n">host</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="n">host_with_port</span>
</span><span class="line">        <span class="n">entries</span> <span class="o">=</span> <span class="c1"># ... skipped ...</span>
</span><span class="line">        <span class="n">send_data</span> <span class="no">SearchResults</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">reverted_query</span><span class="p">,</span> <span class="n">entries</span><span class="p">,</span> <span class="n">host</span><span class="p">)</span><span class="o">.</span><span class="n">render</span><span class="p">,</span>
</span><span class="line">                  <span class="ss">filename</span><span class="p">:</span> <span class="s2">&quot;search.pdf&quot;</span><span class="p">,</span>
</span><span class="line">                  <span class="ss">type</span><span class="p">:</span> <span class="ss">:pdf</span><span class="p">,</span>
</span><span class="line">                  <span class="ss">disposition</span><span class="p">:</span> <span class="s2">&quot;attachment&quot;</span>
</span><span class="line">      <span class="k">end</span>
</span><span class="line">    <span class="k">end</span>
</span><span class="line">  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h1 id="section-3">Заключение</h1>

<p>С помощью библиотеки Prawn можно относительно легко генерировать простые
(и не очень) PDF-файлы. Возможно, подход, выбранный создателями
библиотеки (DSL), не самый оптимальный, но со своей задачей она
справляется на отлично.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Юнит-тестирование в Racket: RackUnit]]></title>
    <link href="http://blog.smaximov.info/blog/2013/06/19/unit-testing-in-racket-with-rackunit/"/>
    <updated>2013-06-19T22:30:00+11:00</updated>
    <id>http://blog.smaximov.info/blog/2013/06/19/unit-testing-in-racket-with-rackunit</id>
    <content type="html"><![CDATA[<ul id="markdown-toc">
  <li><a href="#section">Введение</a></li>
  <li><a href="#racket">Юнит-тестирование в Racket</a>    <ul>
      <li><a href="#section-1">Простые проверки</a></li>
      <li><a href="#test-cases">Test Cases</a></li>
      <li><a href="#test-suites">Test Suites</a></li>
    </ul>
  </li>
  <li><a href="#section-2">Разное</a>    <ul>
      <li><a href="#section-3">Поток управления в тестах</a></li>
      <li><a href="#section-4">Пользовательский интерфейс</a></li>
    </ul>
  </li>
</ul>

<h1 id="section">Введение</h1>

<p><em>Юнит-тестирование</em> — это процесс проверки на корректность
отдельных единиц (модулей) исходного кода вместе со связанными
данными. Цель юнит-тестирования состоит в том, чтобы изолировать
отдельные части программы друг от друга и убедиться, что каждая
отдельная часть ведет себя корректно.</p>

<p>Подробнее о юнит-тестировании можно узнать <a href="http://en.wikipedia.org/wiki/Unit_testing" title="Wikipedia entry for Unit Testing">здесь</a>.</p>

<p>Disclaimer: по большей части этот пост представляет собой выборочный
перевод официальной документации.</p>

<h1 id="racket">Юнит-тестирование в Racket</h1>

<p>Racket поставляется с собственным фреймворком для юнит-тестирования
<a href="http://docs.racket-lang.org/rackunit/" title="RackUnit Documentation">RackUnit</a>. RackUnit позволяет использовать простые
проверки (<em>Checks</em>), группировать несколько связанных проверок в один
<em>Test Case</em>, который устанавливает линейную зависимость между
тестами: если какой-то тест провалится, то следующие тесты не будут
запущены. Checks и Test Cases выполняются сразу же, как только их
достигнет поток управления.</p>

<p>Существует еще один тип тестов — <em>Test Suite</em>. Test Suite’ы состоят из Test
Case’ов и других Test Suite’ов; их выполнение отложено до момента,
определенного программистом.</p>

<p>О философии, лежащей за этими концепциями, можно почитать
<a href="http://docs.racket-lang.org/rackunit/philosophy.html" title="RackUnit Philosophy">тут</a>.</p>

<p>Для написания тестов необходимо подключить модуль <code>rackunit</code>:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="racket"><span class="line"><span class="p">(</span><span class="k">require </span><span class="nv">rackunit</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<!-- more -->

<h2 id="section-1">Простые проверки</h2>

<p>В основе RackUnit лежат проверки (Checks), которые проверяют некоторое
условие. В случае, если условие выполняется, проверка вычисляется в
<code>#&lt;void&gt;</code>, в противном случае возбуждается исключение <code>exn:test:check</code>
с детальной информацией об ошибке. Проверка может содержать
необязательное сообщение, которое будет выводиться в случае ошибки.</p>

<p>RackUnit предоставляет различные типы проверок:</p>

<ul>
  <li>проверки, которые соответствуют основным логическим предикатам
языка:</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="racket"><span class="line"><span class="c1">;; Проверка на эквивалентность, успешна</span>
</span><span class="line"><span class="p">(</span><span class="nf">check-eq?</span> <span class="nv">empty</span> <span class="p">(</span><span class="nf">rest</span> <span class="o">&#39;</span><span class="p">(</span><span class="mi">1</span><span class="p">)))</span>
</span><span class="line">
</span><span class="line"><span class="c1">;; Проверка на равенство, неудачна,</span>
</span><span class="line"><span class="c1">;; содержит дополнительное сообщение</span>
</span><span class="line"><span class="p">(</span><span class="nf">check-equal?</span> <span class="o">&#39;</span><span class="p">(</span><span class="mi">1</span> <span class="mi">2</span> <span class="mi">3</span><span class="p">)</span> <span class="s">&quot;1 2 3&quot;</span> <span class="s">&quot;List of integers is not a string&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li>проверки на истину и ложь:</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="racket"><span class="line"><span class="p">(</span><span class="nf">check-true</span> <span class="p">(</span><span class="nf">empty?</span> <span class="o">&#39;</span><span class="p">(</span><span class="mi">1</span><span class="p">)))</span>
</span><span class="line"><span class="p">(</span><span class="nf">check-false</span> <span class="no">#f</span> <span class="s">&quot;Obviously passes&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li>проверки, которые принимают предикаты:</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="racket"><span class="line"><span class="p">(</span><span class="nf">check-pred</span> <span class="nv">rational?</span> <span class="m">1/2</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li>проверки, которые могут перехватывать исключения:</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="racket"><span class="line"><span class="p">(</span><span class="nf">check-exn</span> <span class="nv">exn:fail:contract?</span>
</span><span class="line">           <span class="p">(</span><span class="k">lambda </span><span class="p">()</span>
</span><span class="line">             <span class="p">(</span><span class="nf">rest</span> <span class="nv">empty</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li>и другие. Полный список достаточно широк, и его нет
смысла приводить здесь; желающим предлагается изучить
<a href="http://docs.racket-lang.org/rackunit/api.html#(part._.Checks)" title="RackUnit Checks Documentation">документацию</a>.</li>
</ul>

<p>К исключению, которое возникает, когда проверка не выполняется, можно
добавить дополнительную информацию типа <code>check-info</code> с помощью функции
<code>with-check-info*</code> и макроса <code>with-check-info</code>. Эта информацию
выведется вместе с сообщением об ошибке:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="racket"><span class="line"><span class="p">(</span><span class="nf">for-each</span>
</span><span class="line"> <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">elt</span><span class="p">)</span>
</span><span class="line">   <span class="p">(</span><span class="nf">with-check-info</span>
</span><span class="line">    <span class="p">([</span><span class="ss">&#39;current-element</span> <span class="nv">elt</span><span class="p">])</span>
</span><span class="line">    <span class="p">(</span><span class="nf">check-pred</span> <span class="nv">odd?</span> <span class="nv">elt</span><span class="p">)))</span>
</span><span class="line"> <span class="o">&#39;</span><span class="p">(</span><span class="mi">1</span> <span class="mi">3</span> <span class="mi">5</span> <span class="mi">7</span> <span class="mi">8</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Можно определять новые проверки. Для этого существует несколько
макросов, один из которых — <code>define-simple-check</code> —
используется в следующем примере:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="racket"><span class="line"><span class="p">(</span><span class="nf">define-simple-check</span> <span class="p">(</span><span class="nf">check-multiple-of-five?</span> <span class="nv">number</span><span class="p">)</span>
</span><span class="line">  <span class="p">(</span><span class="nf">check-eqv?</span> <span class="p">(</span><span class="nb">remainder </span><span class="nv">number</span> <span class="mi">5</span><span class="p">)</span> <span class="mi">0</span> <span class="p">(</span><span class="nb">format </span><span class="s">&quot;~a is not a multiple of five&quot;</span> <span class="nv">number</span><span class="p">)))</span>
</span><span class="line">
</span><span class="line"><span class="p">(</span><span class="nf">check-multiple-of-five?</span> <span class="mi">26</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="test-cases">Test Cases</h2>

<p>С ростом сложности программы единица тестирования выходит за пределы
отдельной проверки. Часто возникает случай, что если какая-нибудь
проверка не выполняется, то нет смысла запускать другие проверки. Для
решения подобных проблем существуют составные тестирующие формы,
которые позволяют группировать выражения. Если любое выражение не
выполняется, то следующие выражения не проверяются; вся составная
форма считается не выполненной.</p>

<p>Простейшей составной тестирующей формой является <em>Test Case</em>. Test
Case можно объявить с помощью формы <code>test-begin</code>:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="racket"><span class="line"><span class="p">(</span><span class="nf">test-begin</span>
</span><span class="line"> <span class="p">(</span><span class="nf">check-false</span> <span class="p">(</span><span class="nf">empty?</span> <span class="nv">empty</span><span class="p">))</span>
</span><span class="line"> <span class="p">(</span><span class="nf">fail</span> <span class="s">&quot;This message will not be shown&quot;</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>В предыдущем примере первая же проверка не выполняется, что приводит к
тому, что последующие выражения  — <code>(fail ...)</code> — не
проверяются.</p>

<p>С помощью формы <code>test-case</code> можно указать имя для определяемого Test
Case’а; это имя будет выведено, если тест завершится неудачей.</p>

<p>Существует несколько вспомогательных процедур для объявления Test
Cases, информацию о них можно посмотреть в
<a href="http://docs.racket-lang.org/rackunit/api.html#(part._.Test_.Cases)" title="RackUnit Test Cases Documentation">документации</a>.</p>

<h2 id="test-suites">Test Suites</h2>

<p>Test Cases в свою очередь тоже могут быть сгруппированы в <em>Test
Suites</em>. Test Suite может содержать как Test Cases, так и другие Test
Units. В отличие от предыдущих видов тестов, Test Suite не запускается
сразу же, когда поток управления достигает определения Test Suite;
вместо этого программист должен пользоваться функциями, запускающими
Test Suites.</p>

<p>Создать Test Suite можно с помощью базовой формы <code>test-suite</code>. Она
принимает необязательные имя для Test Suite и действия (<em>thunks</em>),
предназначенные для выполнения до и после проверки Test Suite.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
</pre></td><td class="code"><pre><code class="racket"><span class="line"><span class="p">(</span><span class="k">define </span><span class="nv">my-test-suite</span>
</span><span class="line">  <span class="p">(</span><span class="nf">test-suite</span>
</span><span class="line">   <span class="s">&quot;My super test suite&quot;</span>
</span><span class="line">   <span class="kd">#:before</span> <span class="p">(</span><span class="k">lambda </span><span class="p">()</span>
</span><span class="line">              <span class="p">(</span><span class="nb">display </span><span class="s">&quot;Runs before the entire suite\n&quot;</span><span class="p">))</span>
</span><span class="line">   <span class="kd">#:after</span> <span class="p">(</span><span class="k">lambda </span><span class="p">()</span>
</span><span class="line">             <span class="p">(</span><span class="nb">display </span><span class="s">&quot;Runs after the entire suite\n&quot;</span><span class="p">))</span>
</span><span class="line">   <span class="p">(</span><span class="nf">test-case</span>
</span><span class="line">    <span class="s">&quot;Named test case&quot;</span>
</span><span class="line">    <span class="p">(</span><span class="nf">test-eq?</span> <span class="s">&quot;Checking the equality of numbers&quot;</span> <span class="mi">42</span> <span class="mi">42</span><span class="p">))</span>
</span><span class="line">   <span class="p">(</span><span class="nf">test-suite</span>
</span><span class="line">    <span class="s">&quot;Nested test suite&quot;</span>
</span><span class="line">    <span class="p">(</span><span class="nf">test-begin</span>
</span><span class="line">     <span class="p">(</span><span class="nf">check-not-exn</span>
</span><span class="line">      <span class="p">(</span><span class="k">lambda </span><span class="p">()</span>
</span><span class="line">        <span class="no">#f</span><span class="p">))</span>
</span><span class="line">     <span class="p">(</span><span class="nf">check</span> <span class="nv">memq</span> <span class="ss">&#39;racket</span> <span class="o">&#39;</span><span class="p">(</span><span class="nv">lisp</span> <span class="nv">common-lisp</span> <span class="nv">scheme</span> <span class="nv">racket</span><span class="p">))))))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Существуют макросы для упрощения определения Test Suite’ов. Макрос
<code>define-test-suite</code> создает Test Suite с заданным именем, приведенным
к строке, и связывает созданный тест с этим именем. Вышеприведенный
пример может быть переписан с помощью макроса <code>define-test-suite</code> так:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
</pre></td><td class="code"><pre><code class="racket"><span class="line"><span class="p">(</span><span class="nf">define-test-suite</span> <span class="nv">my-test-suite</span>
</span><span class="line">   <span class="kd">#:before</span> <span class="p">(</span><span class="k">lambda </span><span class="p">()</span>
</span><span class="line">              <span class="p">(</span><span class="nb">display </span><span class="s">&quot;Runs before the entire suite\n&quot;</span><span class="p">))</span>
</span><span class="line">   <span class="kd">#:after</span> <span class="p">(</span><span class="k">lambda </span><span class="p">()</span>
</span><span class="line">             <span class="p">(</span><span class="nb">display </span><span class="s">&quot;Runs after the entire suite\n&quot;</span><span class="p">))</span>
</span><span class="line">  <span class="p">(</span><span class="nf">test-case</span>
</span><span class="line">   <span class="s">&quot;Named test case&quot;</span>
</span><span class="line">   <span class="p">(</span><span class="nf">test-eq?</span> <span class="s">&quot;Checking the equality of numbers&quot;</span> <span class="mi">42</span> <span class="mi">42</span><span class="p">))</span>
</span><span class="line">  <span class="p">(</span><span class="nf">test-suite</span>
</span><span class="line">   <span class="s">&quot;Nested test suite&quot;</span>
</span><span class="line">   <span class="p">(</span><span class="nf">test-begin</span>
</span><span class="line">    <span class="p">(</span><span class="nf">check-not-exn</span>
</span><span class="line">     <span class="p">(</span><span class="k">lambda </span><span class="p">()</span>
</span><span class="line">       <span class="no">#f</span><span class="p">))</span>
</span><span class="line">    <span class="p">(</span><span class="nf">check</span> <span class="nv">memq</span> <span class="ss">&#39;racket</span> <span class="o">&#39;</span><span class="p">(</span><span class="nv">lisp</span> <span class="nv">common-lisp</span> <span class="nv">scheme</span> <span class="nv">racket</span><span class="p">)))))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Макрос <code>define/provide-test-suite</code> ведет себя как <code>define-test-suite</code>,
только он еще импортирует (<em>provides</em>) Test Suite.</p>

<h1 id="section-2">Разное</h1>

<p>Рассмотрим другие возможности RackUnit.</p>

<h2 id="section-3">Поток управления в тестах</h2>

<p>Макросы <code>before</code>, <code>after</code> и <code>around</code> позволяют указать код, который
должен выполняться, соответственно, до, после и “вокруг” тестовых
выражений. Эти действия выполняются вне зависимости от того, возникли
ли в процессе выполнения тестого кода исключения.</p>

<p>В следующем примере, взятом из документации, проверяется, что файл
“test.dat” содержит строку “foo”. Когда поток выполнения достигает
тестового выражения, выполняется <code>before</code>-действие, которое записывает
эту строку в файл. Когда поток выполнения покидает тестовый код,
выполнятся <code>after</code>-действие, которое удаляет созданный файл.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="racket"><span class="line"><span class="p">(</span><span class="nf">around</span>
</span><span class="line">  <span class="p">(</span><span class="nb">with-output-to-file </span><span class="s">&quot;test.dat&quot;</span>
</span><span class="line">     <span class="p">(</span><span class="k">lambda </span><span class="p">()</span>
</span><span class="line">       <span class="p">(</span><span class="nb">write </span><span class="s">&quot;foo&quot;</span><span class="p">)))</span>
</span><span class="line">  <span class="p">(</span><span class="nb">with-input-from-file </span><span class="s">&quot;test.dat&quot;</span>
</span><span class="line">    <span class="p">(</span><span class="k">lambda </span><span class="p">()</span>
</span><span class="line">      <span class="p">(</span><span class="nf">check-equal?</span> <span class="s">&quot;foo&quot;</span> <span class="p">(</span><span class="nf">read</span><span class="p">))))</span>
</span><span class="line">  <span class="p">(</span><span class="nb">delete-file </span><span class="s">&quot;test.dat&quot;</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="section-4">Пользовательский интерфейс</h2>

<p>RackUnit предоставляет текстовый и графический пользовательский
интерфейс.</p>

<p>Текстовый интерфейс предоставляется модулем <code>rackunit/text-ui</code>,
который определяет функцию <code>run-tests</code>, запускающую заданный тест.
Результаты теста выводятся в <code>current-output-port</code>.
Функция также может принимать параметр <code>verbosity</code>, который
контроллирует объем выводимой информации.</p>

<p>Модуль <code>rackinit/gui</code> предоставляет графический пользовательский
интерфейс. Функция <code>test/gui</code> создает окно, в котором запускаются
заданные тесты.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Начало]]></title>
    <link href="http://blog.smaximov.info/blog/2013/06/19/at-the-very-beginning/"/>
    <updated>2013-06-19T21:27:00+11:00</updated>
    <id>http://blog.smaximov.info/blog/2013/06/19/at-the-very-beginning</id>
    <content type="html"><![CDATA[<p>Первая запись в блоге.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="cl"><span class="line"><span class="p">(</span><span class="nb">format</span> <span class="no">t</span> <span class="s">&quot;Hello, World!&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
]]></content>
  </entry>
  
</feed>
