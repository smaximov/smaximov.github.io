<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Без названия]]></title>
  <link href="http://smaximov.github.io/atom.xml" rel="self"/>
  <link href="http://smaximov.github.io/"/>
  <updated>2013-06-26T19:24:03+11:00</updated>
  <id>http://smaximov.github.io/</id>
  <author>
    <name><![CDATA[Сергей Максимов]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Kramdown в качестве процессора Markdown]]></title>
    <link href="http://smaximov.github.io/blog/2013/06/26/switching-markdown-processor-to-kramdown/"/>
    <updated>2013-06-26T18:57:00+11:00</updated>
    <id>http://smaximov.github.io/blog/2013/06/26/switching-markdown-processor-to-kramdown</id>
    <content type="html"><![CDATA[<p>Перевёл обработку Markdown на <a href="http://kramdown.rubyforge.org/index.html">Kramdown</a>. Что это (пока)
дало: сноски и генерацию содержания. Стили для них взял (с небольшими
изменениями)
<a href="http://hiltmon.com/blog/2013/05/08/octopress-now-has-footnotes/">отсюда</a>
и
<a href="http://blog.riemann.cc/2013/04/10/table-of-contents-in-octopress/">отсюда</a>:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>sass/custom/_styles.scss</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
</pre></td><td class="code"><pre><code class="scss"><span class="line"><span class="nn">#markdown-toc</span><span class="nd">:before</span> <span class="p">{</span>
</span><span class="line">   <span class="na">content</span><span class="o">:</span> <span class="s2">&quot;Содержание&quot;</span><span class="p">;</span>
</span><span class="line">   <span class="na">font-weight</span><span class="o">:</span> <span class="no">bold</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line"><span class="nt">ul</span><span class="nn">#markdown-toc</span> <span class="p">{</span>
</span><span class="line">   <span class="na">list-style</span><span class="o">:</span> <span class="no">none</span><span class="p">;</span>
</span><span class="line">   <span class="na">float</span><span class="o">:</span> <span class="no">right</span><span class="p">;</span>
</span><span class="line">   <span class="k">@include</span><span class="nd"> shadow-box</span><span class="p">;</span>
</span><span class="line">   <span class="na">background-color</span><span class="o">:</span> <span class="nb">white</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="nc">.footnotes</span> <span class="p">{</span>
</span><span class="line">   <span class="na">font-size</span><span class="o">:</span> <span class="mi">13</span><span class="kt">px</span><span class="p">;</span>
</span><span class="line">   <span class="na">line-height</span><span class="o">:</span> <span class="mi">16</span><span class="kt">px</span><span class="p">;</span>
</span><span class="line">   <span class="na">color</span><span class="o">:</span> <span class="mh">#666</span><span class="p">;</span>
</span><span class="line">   <span class="na">border-top</span><span class="o">:</span> <span class="mi">2</span><span class="kt">px</span> <span class="no">groove</span> <span class="nb">gray</span><span class="p">;</span>
</span><span class="line">   <span class="na">padding-top</span><span class="o">:</span> <span class="mi">1</span><span class="kt">em</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">   <span class="nt">ol</span> <span class="p">{</span>
</span><span class="line">      <span class="na">padding-left</span><span class="o">:</span> <span class="mi">2</span><span class="kt">em</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">      <span class="nt">p</span> <span class="p">{</span>
</span><span class="line">         <span class="na">margin-bottom</span><span class="o">:</span> <span class="mi">6</span><span class="kt">px</span><span class="p">;</span>
</span><span class="line">      <span class="p">}</span>
</span><span class="line">   <span class="p">}</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Для вставки содержания в тело поста нужно добавить атрибут <code>toc</code> к
элементу списка, например:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="text"><span class="line">* TOC
</span><span class="line">{:toc}
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Простановка сносок похоже на простановку ссылок-сносок:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="text"><span class="line">This is a text[^fn] with footnotes.
</span><span class="line">
</span><span class="line">...
</span><span class="line">
</span><span class="line">[^fn]: footnote text.
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>В квадратных скобках с “птичкой” (caret) указывается идентификатор
сноски, который должен быть уникальным в пределах одного документа.
Идентификатор может состоять из цифр и букв. Текст ссылки
задается где-нибудь в документе через двоеточие.</p>

<hr />

<p>Kramdown содержит кучю других расширений Markdown, их описание есть на
<a href="http://kramdown.rubyforge.org/syntax.html">сайте</a>.</p>

<p>Результат мне понравился (примечательно, что этот пост не содержит ни
содержания, ни сносок).</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Добавление категорий к заголовку поста]]></title>
    <link href="http://smaximov.github.io/blog/2013/06/25/add-categories-to-post-title/"/>
    <updated>2013-06-25T22:14:00+11:00</updated>
    <id>http://smaximov.github.io/blog/2013/06/25/add-categories-to-post-title</id>
    <content type="html"><![CDATA[<p>Решил вот немного изменить внешний вид блога и заодно разобраться в
расположении и назначении стилевых файлов и шаблонов HTML в
Octorpess/Jekyll.</p>

<p>Изменения затрагивают подзаголовок поста, к которому я решил добавить
список категорий. Шаблон списка категорий располагается в файле
<code>source/_includes/post/categories.html</code>. Этот шаблон, соответственно,
следует включить в шаблон <code>source/_includes/article.html</code> с помощью
тега Liquid <code>include</code>:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="html"><span class="line">  ...
</span><span class="line">  <span class="nt">&lt;p</span> <span class="na">class=</span><span class="s">&quot;meta&quot;</span><span class="nt">&gt;</span>
</span><span class="line">    {% include post/date.html %}{{ time }}
</span><span class="line">    {% if site.disqus_short_name and page.comments != false and post.comments != false and site.disqus_show_comment_count == true %}
</span><span class="line">     | <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;{% if index %}{{ root_url }}{{ post.url }}{% endif %}#disqus_thread&quot;</span><span class="nt">&gt;</span>Comments<span class="nt">&lt;/a&gt;</span>
</span><span class="line">    {% endif %}
</span><span class="line">    {% include post/categories.html %}
</span><span class="line">  <span class="nt">&lt;/p&gt;</span>
</span><span class="line">  ...
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>И немного CSS в <code>sass/custom/_styles.scss</code>:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
</pre></td><td class="code"><pre><code class="scss"><span class="line"><span class="nt">article</span> <span class="o">&gt;</span> <span class="nt">header</span> <span class="nt">p</span><span class="nc">.meta</span> <span class="p">{</span>
</span><span class="line">    <span class="nt">span</span><span class="nc">.categories</span> <span class="p">{</span>
</span><span class="line">       <span class="na">text-transform</span><span class="o">:</span> <span class="no">none</span><span class="p">;</span>
</span><span class="line">       <span class="nt">a</span><span class="nc">.category</span> <span class="p">{</span>
</span><span class="line">          <span class="k">@extend</span> <span class="nc">.serif</span><span class="o">;</span>
</span><span class="line">          <span class="nt">font-size</span><span class="nd">:</span> <span class="nt">1em</span><span class="o">;</span>
</span><span class="line">          <span class="k">&amp;</span><span class="nd">:hover</span><span class="o">,</span> <span class="k">&amp;</span><span class="nd">:link</span><span class="o">,</span> <span class="k">&amp;</span><span class="nd">:visited</span><span class="o">,</span> <span class="k">&amp;</span><span class="nd">:active</span> <span class="p">{</span>
</span><span class="line">             <span class="na">text-decoration</span><span class="o">:</span> <span class="no">none</span><span class="p">;</span>
</span><span class="line">             <span class="na">color</span><span class="o">:</span> <span class="nv">$text-color-light</span><span class="p">;</span>
</span><span class="line">          <span class="p">}</span>
</span><span class="line">       <span class="p">}</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">
</span><span class="line">   <span class="nc">.separator</span> <span class="p">{</span>
</span><span class="line">      <span class="na">color</span><span class="o">:</span> <span class="nf">darken</span><span class="p">(</span><span class="nv">$text-color-light</span><span class="o">,</span> <span class="mi">15</span><span class="p">);</span>
</span><span class="line">   <span class="p">}</span>
</span><span class="line">   <span class="nt">time</span> <span class="o">+</span> <span class="nn">#disqus_thread</span><span class="nd">:before</span><span class="o">,</span> <span class="nt">time</span> <span class="o">+</span> <span class="nc">.categories</span><span class="nd">:before</span><span class="o">,</span> <span class="nn">#disqus_thread</span> <span class="o">+</span> <span class="nc">.categories</span><span class="nd">:before</span> <span class="p">{</span>
</span><span class="line">      <span class="k">@extend</span> <span class="nc">.separator</span><span class="o">;</span>
</span><span class="line">   <span class="p">}</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Вуаля!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Генерация PDF с помощью Prawn]]></title>
    <link href="http://smaximov.github.io/blog/2013/06/21/generating-pdf-in-rails-with-prawn/"/>
    <updated>2013-06-21T18:17:00+11:00</updated>
    <id>http://smaximov.github.io/blog/2013/06/21/generating-pdf-in-rails-with-prawn</id>
    <content type="html"><![CDATA[<ul id="markdown-toc">
  <li><a href="#section">Введение</a></li>
  <li><a href="#section-1">Установка и настройка</a></li>
  <li><a href="#section-2">Использование</a></li>
  <li><a href="#section-3">Заключение</a></li>
</ul>

<h1 id="section">Введение</h1>

<p>Динамическое создание PDF — довольно распространенное задача.
Для Ruby существует несколько библиотек для генерации с PDF-файлов,
вот некоторые из них:</p>

<ul>
  <li>
    <p><a href="https://github.com/pdfkit/pdfkit">PDFkit</a> — библиотека для конвертации HTML в PDF. Использует
shell-утилиту <a href="http://code.google.com/p/wkhtmltopdf/">wkhtmltopdf</a>, которая, в свою очередь,
использует webkit в качестве движка рендеринга;</p>
  </li>
  <li>
    <p><a href="https://github.com/mileszs/wicked_pdf">Wicked pdf</a> — тоже конвертация HTML → PDF,
тоже <a href="http://code.google.com/p/wkhtmltopdf/">wkhtmltopdf</a>;</p>
  </li>
  <li>
    <p><a href="https://github.com/fnando/kitabu">Kitabu</a> — генерация PDF и e-Pub из Textile, Markdown
или HTML;</p>
  </li>
  <li>
    <p><a href="http://prawn.majesticseacreature.com/">Prawn</a> — библиотека для создания PDF-файлов,
написанная на чистом Ruby.</p>
  </li>
</ul>

<p>Таким образом, видны две тенденции: генерация PDF из какого-нибудь
языка разметки либо использование DSL для генерации.</p>

<p>Мой выбор пал на Prawn, о нем и будет рассказано в остальной части
поста.</p>

<!-- more -->

<h1 id="section-1">Установка и настройка</h1>

<p>Установка проста: добавьте следующую строку в <code>Gemfile</code>:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="n">gem</span> <span class="s1">&#39;prawn&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Затем нужно добавить в <code>config/application.rb</code> автозагрузку файлов из
директории <code>/app/pdfs/</code>, в которой мы будем хранить классы, создающие
PDF-файлы:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">module</span> <span class="nn">Biotriz</span>
</span><span class="line">  <span class="k">class</span> <span class="nc">Application</span> <span class="o">&lt;</span> <span class="ss">Rails</span><span class="p">:</span><span class="ss">:Application</span>
</span><span class="line">    <span class="n">config</span><span class="o">.</span><span class="n">autoload_paths</span> <span class="o">&lt;&lt;</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="no">Rails</span><span class="o">.</span><span class="n">root</span><span class="si">}</span><span class="s2">/app/pdfs&quot;</span>
</span><span class="line">    <span class="c1"># ... skipped ...</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Далее зарегистрируем Mime-тип <code>:pdf</code> в
<code>/config/initializers/mime_types.rb</code>:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="ss">Mime</span><span class="p">:</span><span class="ss">:Type</span><span class="o">.</span><span class="n">register</span> <span class="s1">&#39;application/pdf&#39;</span><span class="p">,</span> <span class="ss">:pdf</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Это позволит нам указывать тип <code>:pdf</code> в методе <code>send_data</code>, а также
использовать его в блоке <code>respond_to</code>.</p>

<h1 id="section-2">Использование</h1>

<p>Код класса, создающего PDF:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>app/pdfs/search_results.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
<span class="line-number">51</span>
<span class="line-number">52</span>
<span class="line-number">53</span>
<span class="line-number">54</span>
<span class="line-number">55</span>
<span class="line-number">56</span>
<span class="line-number">57</span>
<span class="line-number">58</span>
<span class="line-number">59</span>
<span class="line-number">60</span>
<span class="line-number">61</span>
<span class="line-number">62</span>
<span class="line-number">63</span>
<span class="line-number">64</span>
<span class="line-number">65</span>
<span class="line-number">66</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="c1"># encoding: utf-8</span>
</span><span class="line">
</span><span class="line"><span class="nb">require</span> <span class="s2">&quot;prawn/measurement_extensions&quot;</span>
</span><span class="line">
</span><span class="line"><span class="k">class</span> <span class="nc">SearchResults</span> <span class="o">&lt;</span> <span class="ss">Prawn</span><span class="p">:</span><span class="ss">:Document</span>
</span><span class="line">  <span class="kp">include</span> <span class="no">Rails</span><span class="o">.</span><span class="n">application</span><span class="o">.</span><span class="n">routes</span><span class="o">.</span><span class="n">url_helpers</span>
</span><span class="line">  <span class="kp">include</span> <span class="ss">ActionDispatch</span><span class="p">:</span><span class="ss">:Routing</span><span class="o">::</span><span class="no">PolymorphicRoutes</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">query</span><span class="p">,</span> <span class="n">entries</span><span class="p">,</span> <span class="n">host</span><span class="p">)</span>
</span><span class="line">    <span class="k">super</span><span class="p">()</span>
</span><span class="line">    <span class="n">pad</span><span class="p">(</span><span class="mi">20</span><span class="p">)</span> <span class="k">do</span>
</span><span class="line">      <span class="n">font</span><span class="p">(</span><span class="s2">&quot;Helvetica&quot;</span><span class="p">,</span> <span class="ss">size</span><span class="p">:</span> <span class="mi">20</span><span class="p">,</span> <span class="ss">style</span><span class="p">:</span> <span class="ss">:bold</span><span class="p">)</span> <span class="k">do</span>
</span><span class="line">        <span class="n">text</span> <span class="s2">&quot;Search Results (</span><span class="si">#{</span><span class="no">Time</span><span class="o">.</span><span class="n">zone</span><span class="o">.</span><span class="n">now</span><span class="o">.</span><span class="n">strftime</span><span class="p">(</span><span class="s1">&#39;%d/%m/%Y %H:%M&#39;</span><span class="p">)</span><span class="si">}</span><span class="s2">)&quot;</span>
</span><span class="line">      <span class="k">end</span>
</span><span class="line">    <span class="k">end</span>
</span><span class="line">
</span><span class="line">    <span class="n">pad_bottom</span><span class="p">(</span><span class="mi">20</span><span class="p">)</span> <span class="k">do</span>
</span><span class="line">      <span class="n">font</span><span class="p">(</span><span class="s2">&quot;Helvetica&quot;</span><span class="p">,</span> <span class="ss">size</span><span class="p">:</span> <span class="mi">14</span><span class="p">,</span> <span class="ss">style</span><span class="p">:</span> <span class="ss">:bold</span><span class="p">)</span> <span class="k">do</span>
</span><span class="line">        <span class="n">pad_bottom</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span> <span class="k">do</span>
</span><span class="line">          <span class="n">text</span> <span class="s2">&quot;Search Query&quot;</span>
</span><span class="line">        <span class="k">end</span>
</span><span class="line">      <span class="k">end</span>
</span><span class="line">
</span><span class="line">      <span class="n">query_output</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class="line">      <span class="n">first</span> <span class="o">=</span> <span class="kp">false</span>
</span><span class="line">
</span><span class="line">      <span class="n">query</span><span class="o">.</span><span class="n">try</span><span class="p">(</span><span class="ss">:each</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">item</span><span class="o">|</span>
</span><span class="line">        <span class="n">color</span> <span class="o">=</span> <span class="n">item</span><span class="o">[</span><span class="ss">:color</span><span class="o">][</span><span class="mi">1</span><span class="o">.</span><span class="n">.</span><span class="o">-</span><span class="mi">1</span><span class="o">]</span>
</span><span class="line">        <span class="n">cls</span> <span class="o">=</span> <span class="n">item</span><span class="o">[</span><span class="ss">:model</span><span class="o">].</span><span class="n">classify</span><span class="o">.</span><span class="n">constantize</span>
</span><span class="line">
</span><span class="line">        <span class="n">item</span><span class="o">[</span><span class="ss">:values</span><span class="o">].</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">value</span><span class="o">|</span>
</span><span class="line">          <span class="n">query_output</span> <span class="o">&lt;&lt;</span> <span class="p">{</span>
</span><span class="line">            <span class="ss">text</span><span class="p">:</span> <span class="s2">&quot;[</span><span class="si">#{</span><span class="n">value</span><span class="o">.</span><span class="n">title</span><span class="si">}</span><span class="s2">]&quot;</span><span class="p">,</span>
</span><span class="line">            <span class="ss">link</span><span class="p">:</span> <span class="n">polymorphic_url</span><span class="p">(</span><span class="n">value</span><span class="p">,</span> <span class="ss">host</span><span class="p">:</span> <span class="n">host</span><span class="p">)</span>
</span><span class="line">          <span class="p">}</span>
</span><span class="line">
</span><span class="line">          <span class="k">if</span> <span class="ow">not</span> <span class="n">first</span>
</span><span class="line">            <span class="n">query_output</span> <span class="o">&lt;&lt;</span> <span class="p">{</span> <span class="ss">text</span><span class="p">:</span> <span class="s2">&quot;   &quot;</span> <span class="p">}</span>
</span><span class="line">            <span class="n">first</span> <span class="o">=</span> <span class="kp">false</span>
</span><span class="line">          <span class="k">end</span>
</span><span class="line">        <span class="k">end</span>
</span><span class="line">      <span class="k">end</span>
</span><span class="line">
</span><span class="line">      <span class="n">formatted_text</span> <span class="n">query_output</span><span class="p">,</span> <span class="ss">leading</span><span class="p">:</span> <span class="mi">10</span>
</span><span class="line">    <span class="k">end</span>
</span><span class="line">
</span><span class="line">    <span class="n">pad_bottom</span><span class="p">(</span><span class="mi">20</span><span class="p">)</span> <span class="k">do</span>
</span><span class="line">      <span class="n">font</span><span class="p">(</span><span class="s2">&quot;Helvetica&quot;</span><span class="p">,</span> <span class="ss">size</span><span class="p">:</span> <span class="mi">14</span><span class="p">,</span> <span class="ss">style</span><span class="p">:</span> <span class="ss">:bold</span><span class="p">)</span> <span class="k">do</span>
</span><span class="line">        <span class="n">pad_bottom</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span> <span class="k">do</span>
</span><span class="line">          <span class="n">text</span> <span class="s2">&quot;Search Results&quot;</span>
</span><span class="line">        <span class="k">end</span>
</span><span class="line">      <span class="k">end</span>
</span><span class="line">      <span class="n">entries</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">entry</span><span class="o">|</span>
</span><span class="line">        <span class="n">pad_bottom</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span> <span class="k">do</span>
</span><span class="line">          <span class="n">font</span><span class="p">(</span><span class="s2">&quot;Helvetica&quot;</span><span class="p">,</span> <span class="ss">style</span><span class="p">:</span> <span class="ss">:bold</span><span class="p">)</span> <span class="k">do</span>
</span><span class="line">            <span class="n">formatted_text</span> <span class="o">[</span><span class="p">{</span><span class="ss">text</span><span class="p">:</span> <span class="n">entry</span><span class="o">.</span><span class="n">title</span><span class="p">,</span> <span class="ss">link</span><span class="p">:</span> <span class="n">polymorphic_url</span><span class="p">(</span><span class="n">entry</span><span class="p">,</span> <span class="ss">host</span><span class="p">:</span> <span class="n">host</span><span class="p">)}</span><span class="o">]</span>
</span><span class="line">          <span class="k">end</span>
</span><span class="line">        <span class="k">end</span>
</span><span class="line">
</span><span class="line">        <span class="n">pad_bottom</span><span class="p">(</span><span class="mi">15</span><span class="p">)</span> <span class="k">do</span>
</span><span class="line">          <span class="n">text</span> <span class="n">entry</span><span class="o">.</span><span class="n">description</span><span class="p">,</span> <span class="n">indent_paragraphs</span><span class="p">:</span> <span class="mi">1</span><span class="o">.</span><span class="mi">5</span><span class="o">.</span><span class="n">cm</span>
</span><span class="line">        <span class="k">end</span>
</span><span class="line">      <span class="k">end</span>
</span><span class="line">    <span class="k">end</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Особо комментировать этот код не буду, как по мне, он говорит сам за
себя; желающие могут обратиться к документации <a href="http://prawn.majesticseacreature.com/">на сайте</a>, там
же есть мануал.</p>

<p>Код действия, формирующего и отсылающего PDF-файл клиенту:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line">  <span class="k">def</span> <span class="nf">save</span>
</span><span class="line">    <span class="n">respond_to</span> <span class="k">do</span> <span class="o">|</span><span class="nb">format</span><span class="o">|</span>
</span><span class="line">      <span class="c1"># ... skipped ...</span>
</span><span class="line">      <span class="nb">format</span><span class="o">.</span><span class="n">pdf</span> <span class="k">do</span>
</span><span class="line">        <span class="n">query</span> <span class="o">=</span> <span class="n">restore_query</span> <span class="n">params</span><span class="o">[</span><span class="ss">:query</span><span class="o">]</span>
</span><span class="line">        <span class="n">reverted_query</span> <span class="o">=</span> <span class="n">revert_query</span> <span class="ss">query</span><span class="p">:</span> <span class="n">query</span>
</span><span class="line">        <span class="n">host</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="n">host_with_port</span>
</span><span class="line">        <span class="n">entries</span> <span class="o">=</span> <span class="c1"># ... skipped ...</span>
</span><span class="line">        <span class="n">send_data</span> <span class="no">SearchResults</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">reverted_query</span><span class="p">,</span> <span class="n">entries</span><span class="p">,</span> <span class="n">host</span><span class="p">)</span><span class="o">.</span><span class="n">render</span><span class="p">,</span>
</span><span class="line">                  <span class="ss">filename</span><span class="p">:</span> <span class="s2">&quot;search.pdf&quot;</span><span class="p">,</span>
</span><span class="line">                  <span class="ss">type</span><span class="p">:</span> <span class="ss">:pdf</span><span class="p">,</span>
</span><span class="line">                  <span class="ss">disposition</span><span class="p">:</span> <span class="s2">&quot;attachment&quot;</span>
</span><span class="line">      <span class="k">end</span>
</span><span class="line">    <span class="k">end</span>
</span><span class="line">  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h1 id="section-3">Заключение</h1>

<p>С помощью библиотеки Prawn можно относительно легко генерировать простые
(и не очень) PDF-файлы. Возможно, подход, выбранный создателями
библиотеки (DSL), не самый оптимальный, но со своей задачей она
справляется на отлично.</p>

<p>Однако, я даю себе слово попробовать и подход с генерацией PDF из
файлов, написанных на языках разметки ☺</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Юнит-тестирование в Racket: RackUnit]]></title>
    <link href="http://smaximov.github.io/blog/2013/06/19/unit-testing-in-racket-with-rackunit/"/>
    <updated>2013-06-19T22:30:00+11:00</updated>
    <id>http://smaximov.github.io/blog/2013/06/19/unit-testing-in-racket-with-rackunit</id>
    <content type="html"><![CDATA[<ul id="markdown-toc">
  <li><a href="#section">Введение</a></li>
  <li><a href="#racket">Юнит-тестирование в Racket</a>    <ul>
      <li><a href="#section-1">Простые проверки</a></li>
      <li><a href="#test-cases">Test Cases</a></li>
      <li><a href="#test-suites">Test Suites</a></li>
    </ul>
  </li>
  <li><a href="#section-2">Разное</a>    <ul>
      <li><a href="#section-3">Поток управления в тестах</a></li>
      <li><a href="#section-4">Пользовательский интерфейс</a></li>
    </ul>
  </li>
</ul>

<h1 id="section">Введение</h1>

<p><em>Юнит-тестирование</em> — это процесс проверки на корректность
отдельных единиц (модулей) исходного кода вместе со связанными
данными. Цель юнит-тестирования состоит в том, чтобы изолировать
отдельные части программы друг от друга и убедиться, что каждая
отдельная часть ведет себя корректно.</p>

<p>Подробнее о юнит-тестировании можно узнать <a href="http://en.wikipedia.org/wiki/Unit_testing" title="Wikipedia entry for Unit Testing">здесь</a>.</p>

<p>Disclaimer: по большей части этот пост представляет собой выборочный
перевод официальной документации.</p>

<h1 id="racket">Юнит-тестирование в Racket</h1>

<p>Racket поставляется с собственным фреймворком для юнит-тестирования
<a href="http://docs.racket-lang.org/rackunit/" title="RackUnit Documentation">RackUnit</a>. RackUnit позволяет использовать простые
проверки (<em>Checks</em>), группировать несколько связанных проверок в один
<em>Test Case</em>, который устанавливает линейную зависимость между
тестами: если какой-то тест провалится, то следующие тесты не будут
запущены. Checks и Test Cases выполняются сразу же, как только их
достигнет поток управления.</p>

<p>Существует еще один тип тестов — <em>Test Suite</em>. Test Suite’ы состоят из Test
Case’ов и других Test Suite’ов; их выполнение отложено до момента,
определенного программистом.</p>

<p>О философии, лежащей за этими концепциями, можно почитать
<a href="http://docs.racket-lang.org/rackunit/philosophy.html" title="RackUnit Philosophy">тут</a>.</p>

<p>Для написания тестов необходимо подключить модуль <code>rackunit</code>:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="racket"><span class="line"><span class="p">(</span><span class="k">require </span><span class="nv">rackunit</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<!-- more -->

<h2 id="section-1">Простые проверки</h2>

<p>В основе RackUnit лежат проверки (Checks), которые проверяют некоторое
условие. В случае, если условие выполняется, проверка вычисляется в
<code>#&lt;void&gt;</code>, в противном случае возбуждается исключение <code>exn:test:check</code>
с детальной информацией об ошибке. Проверка может содержать
необязательное сообщение, которое будет выводиться в случае ошибки.</p>

<p>RackUnit предоставляет различные типы проверок:</p>

<ul>
  <li>проверки, которые соответствуют основным логическим предикатам
языка:</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="racket"><span class="line"><span class="c1">;; Проверка на эквивалентность, успешна</span>
</span><span class="line"><span class="p">(</span><span class="nf">check-eq?</span> <span class="nv">empty</span> <span class="p">(</span><span class="nf">rest</span> <span class="o">&#39;</span><span class="p">(</span><span class="mi">1</span><span class="p">)))</span>
</span><span class="line">
</span><span class="line"><span class="c1">;; Проверка на равенство, неудачна,</span>
</span><span class="line"><span class="c1">;; содержит дополнительное сообщение</span>
</span><span class="line"><span class="p">(</span><span class="nf">check-equal?</span> <span class="o">&#39;</span><span class="p">(</span><span class="mi">1</span> <span class="mi">2</span> <span class="mi">3</span><span class="p">)</span> <span class="s">&quot;1 2 3&quot;</span> <span class="s">&quot;List of integers is not a string&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li>проверки на истину и ложь:</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="racket"><span class="line"><span class="p">(</span><span class="nf">check-true</span> <span class="p">(</span><span class="nf">empty?</span> <span class="o">&#39;</span><span class="p">(</span><span class="mi">1</span><span class="p">)))</span>
</span><span class="line"><span class="p">(</span><span class="nf">check-false</span> <span class="no">#f</span> <span class="s">&quot;Obviously passes&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li>проверки, которые принимают предикаты:</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="racket"><span class="line"><span class="p">(</span><span class="nf">check-pred</span> <span class="nv">rational?</span> <span class="m">1/2</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li>проверки, которые могут перехватывать исключения:</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="racket"><span class="line"><span class="p">(</span><span class="nf">check-exn</span> <span class="nv">exn:fail:contract?</span>
</span><span class="line">           <span class="p">(</span><span class="k">lambda </span><span class="p">()</span>
</span><span class="line">             <span class="p">(</span><span class="nf">rest</span> <span class="nv">empty</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li>и другие. Полный список достаточно широк, и его нет
смысла приводить здесь; желающим предлагается изучить
<a href="http://docs.racket-lang.org/rackunit/api.html#(part._.Checks)" title="RackUnit Checks Documentation">документацию</a>.</li>
</ul>

<p>К исключению, которое возникает, когда проверка не выполняется, можно
добавить дополнительную информацию типа <code>check-info</code> с помощью функции
<code>with-check-info*</code> и макроса <code>with-check-info</code>. Эта информацию
выведется вместе с сообщением об ошибке:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="racket"><span class="line"><span class="p">(</span><span class="nf">for-each</span>
</span><span class="line"> <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">elt</span><span class="p">)</span>
</span><span class="line">   <span class="p">(</span><span class="nf">with-check-info</span>
</span><span class="line">    <span class="p">([</span><span class="ss">&#39;current-element</span> <span class="nv">elt</span><span class="p">])</span>
</span><span class="line">    <span class="p">(</span><span class="nf">check-pred</span> <span class="nv">odd?</span> <span class="nv">elt</span><span class="p">)))</span>
</span><span class="line"> <span class="o">&#39;</span><span class="p">(</span><span class="mi">1</span> <span class="mi">3</span> <span class="mi">5</span> <span class="mi">7</span> <span class="mi">8</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Можно определять новые проверки. Для этого существует несколько
макросов, один из которых — <code>define-simple-check</code> —
используется в следующем примере:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="racket"><span class="line"><span class="p">(</span><span class="nf">define-simple-check</span> <span class="p">(</span><span class="nf">check-multiple-of-five?</span> <span class="nv">number</span><span class="p">)</span>
</span><span class="line">  <span class="p">(</span><span class="nf">check-eqv?</span> <span class="p">(</span><span class="nb">remainder </span><span class="nv">number</span> <span class="mi">5</span><span class="p">)</span> <span class="mi">0</span> <span class="p">(</span><span class="nb">format </span><span class="s">&quot;~a is not a multiple of five&quot;</span> <span class="nv">number</span><span class="p">)))</span>
</span><span class="line">
</span><span class="line"><span class="p">(</span><span class="nf">check-multiple-of-five?</span> <span class="mi">26</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="test-cases">Test Cases</h2>

<p>С ростом сложности программы единица тестирования выходит за пределы
отдельной проверки. Часто возникает случай, что если какая-нибудь
проверка не выполняется, то нет смысла запускать другие проверки. Для
решения подобных проблем существуют составные тестирующие формы,
которые позволяют группировать выражения. Если любое выражение не
выполняется, то следующие выражения не проверяются; вся составная
форма считается не выполненной.</p>

<p>Простейшей составной тестирующей формой является <em>Test Case</em>. Test
Case можно объявить с помощью формы <code>test-begin</code>:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="racket"><span class="line"><span class="p">(</span><span class="nf">test-begin</span>
</span><span class="line"> <span class="p">(</span><span class="nf">check-false</span> <span class="p">(</span><span class="nf">empty?</span> <span class="nv">empty</span><span class="p">))</span>
</span><span class="line"> <span class="p">(</span><span class="nf">fail</span> <span class="s">&quot;This message will not be shown&quot;</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>В предыдущем примере первая же проверка не выполняется, что приводит к
тому, что последующие выражения  — <code>(fail ...)</code> — не
проверяются.</p>

<p>С помощью формы <code>test-case</code> можно указать имя для определяемого Test
Case’а; это имя будет выведено, если тест завершится неудачей.</p>

<p>Существует несколько вспомогательных процедур для объявления Test
Cases, информацию о них можно посмотреть в
<a href="http://docs.racket-lang.org/rackunit/api.html#(part._.Test_.Cases)" title="RackUnit Test Cases Documentation">документации</a>.</p>

<h2 id="test-suites">Test Suites</h2>

<p>Test Cases в свою очередь тоже могут быть сгруппированы в <em>Test
Suites</em>. Test Suite может содержать как Test Cases, так и другие Test
Units. В отличие от предыдущих видов тестов, Test Suite не запускается
сразу же, когда поток управления достигает определения Test Suite;
вместо этого программист должен пользоваться функциями, запускающими
Test Suites.</p>

<p>Создать Test Suite можно с помощью базовой формы <code>test-suite</code>. Она
принимает необязательные имя для Test Suite и действия (<em>thunks</em>),
предназначенные для выполнения до и после проверки Test Suite.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
</pre></td><td class="code"><pre><code class="racket"><span class="line"><span class="p">(</span><span class="k">define </span><span class="nv">my-test-suite</span>
</span><span class="line">  <span class="p">(</span><span class="nf">test-suite</span>
</span><span class="line">   <span class="s">&quot;My super test suite&quot;</span>
</span><span class="line">   <span class="kd">#:before</span> <span class="p">(</span><span class="k">lambda </span><span class="p">()</span>
</span><span class="line">              <span class="p">(</span><span class="nb">display </span><span class="s">&quot;Runs before the entire suite\n&quot;</span><span class="p">))</span>
</span><span class="line">   <span class="kd">#:after</span> <span class="p">(</span><span class="k">lambda </span><span class="p">()</span>
</span><span class="line">             <span class="p">(</span><span class="nb">display </span><span class="s">&quot;Runs after the entire suite\n&quot;</span><span class="p">))</span>
</span><span class="line">   <span class="p">(</span><span class="nf">test-case</span>
</span><span class="line">    <span class="s">&quot;Named test case&quot;</span>
</span><span class="line">    <span class="p">(</span><span class="nf">test-eq?</span> <span class="s">&quot;Checking the equality of numbers&quot;</span> <span class="mi">42</span> <span class="mi">42</span><span class="p">))</span>
</span><span class="line">   <span class="p">(</span><span class="nf">test-suite</span>
</span><span class="line">    <span class="s">&quot;Nested test suite&quot;</span>
</span><span class="line">    <span class="p">(</span><span class="nf">test-begin</span>
</span><span class="line">     <span class="p">(</span><span class="nf">check-not-exn</span>
</span><span class="line">      <span class="p">(</span><span class="k">lambda </span><span class="p">()</span>
</span><span class="line">        <span class="no">#f</span><span class="p">))</span>
</span><span class="line">     <span class="p">(</span><span class="nf">check</span> <span class="nv">memq</span> <span class="ss">&#39;racket</span> <span class="o">&#39;</span><span class="p">(</span><span class="nv">lisp</span> <span class="nv">common-lisp</span> <span class="nv">scheme</span> <span class="nv">racket</span><span class="p">))))))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Существуют макросы для упрощения определения Test Suite’ов. Макрос
<code>define-test-suite</code> создает Test Suite с заданным именем, приведенным
к строке, и связывает созданный тест с этим именем. Вышеприведенный
пример может быть переписан с помощью макроса <code>define-test-suite</code> так:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
</pre></td><td class="code"><pre><code class="racket"><span class="line"><span class="p">(</span><span class="nf">define-test-suite</span> <span class="nv">my-test-suite</span>
</span><span class="line">   <span class="kd">#:before</span> <span class="p">(</span><span class="k">lambda </span><span class="p">()</span>
</span><span class="line">              <span class="p">(</span><span class="nb">display </span><span class="s">&quot;Runs before the entire suite\n&quot;</span><span class="p">))</span>
</span><span class="line">   <span class="kd">#:after</span> <span class="p">(</span><span class="k">lambda </span><span class="p">()</span>
</span><span class="line">             <span class="p">(</span><span class="nb">display </span><span class="s">&quot;Runs after the entire suite\n&quot;</span><span class="p">))</span>
</span><span class="line">  <span class="p">(</span><span class="nf">test-case</span>
</span><span class="line">   <span class="s">&quot;Named test case&quot;</span>
</span><span class="line">   <span class="p">(</span><span class="nf">test-eq?</span> <span class="s">&quot;Checking the equality of numbers&quot;</span> <span class="mi">42</span> <span class="mi">42</span><span class="p">))</span>
</span><span class="line">  <span class="p">(</span><span class="nf">test-suite</span>
</span><span class="line">   <span class="s">&quot;Nested test suite&quot;</span>
</span><span class="line">   <span class="p">(</span><span class="nf">test-begin</span>
</span><span class="line">    <span class="p">(</span><span class="nf">check-not-exn</span>
</span><span class="line">     <span class="p">(</span><span class="k">lambda </span><span class="p">()</span>
</span><span class="line">       <span class="no">#f</span><span class="p">))</span>
</span><span class="line">    <span class="p">(</span><span class="nf">check</span> <span class="nv">memq</span> <span class="ss">&#39;racket</span> <span class="o">&#39;</span><span class="p">(</span><span class="nv">lisp</span> <span class="nv">common-lisp</span> <span class="nv">scheme</span> <span class="nv">racket</span><span class="p">)))))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Макрос <code>define/provide-test-suite</code> ведет себя как <code>define-test-suite</code>,
только он еще импортирует (<em>provides</em>) Test Suite.</p>

<h1 id="section-2">Разное</h1>

<p>Рассмотрим другие возможности RackUnit.</p>

<h2 id="section-3">Поток управления в тестах</h2>

<p>Макросы <code>before</code>, <code>after</code> и <code>around</code> позволяют указать код, который
должен выполняться, соответственно, до, после и “вокруг” тестовых
выражений. Эти действия выполняются вне зависимости от того, возникли
ли в процессе выполнения тестого кода исключения.</p>

<p>В следующем примере, взятом из документации, проверяется, что файл
“test.dat” содержит строку “foo”. Когда поток выполнения достигает
тестового выражения, выполняется <code>before</code>-действие, которое записывает
эту строку в файл. Когда поток выполнения покидает тестовый код,
выполнятся <code>after</code>-действие, которое удаляет созданный файл.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="racket"><span class="line"><span class="p">(</span><span class="nf">around</span>
</span><span class="line">  <span class="p">(</span><span class="nb">with-output-to-file </span><span class="s">&quot;test.dat&quot;</span>
</span><span class="line">     <span class="p">(</span><span class="k">lambda </span><span class="p">()</span>
</span><span class="line">       <span class="p">(</span><span class="nb">write </span><span class="s">&quot;foo&quot;</span><span class="p">)))</span>
</span><span class="line">  <span class="p">(</span><span class="nb">with-input-from-file </span><span class="s">&quot;test.dat&quot;</span>
</span><span class="line">    <span class="p">(</span><span class="k">lambda </span><span class="p">()</span>
</span><span class="line">      <span class="p">(</span><span class="nf">check-equal?</span> <span class="s">&quot;foo&quot;</span> <span class="p">(</span><span class="nf">read</span><span class="p">))))</span>
</span><span class="line">  <span class="p">(</span><span class="nb">delete-file </span><span class="s">&quot;test.dat&quot;</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="section-4">Пользовательский интерфейс</h2>

<p>RackUnit предоставляет текстовый и графический пользовательский
интерфейс.</p>

<p>Текстовый интерфейс предоставляется модулем <code>rackunit/text-ui</code>,
который определяет функцию <code>run-tests</code>, запускающую заданный тест.
Результаты теста выводятся в <code>current-output-port</code>.
Функция также может принимать параметр <code>verbosity</code>, который
контроллирует объем выводимой информации.</p>

<p>Модуль <code>rackinit/gui</code> предоставляет графический пользовательский
интерфейс. Функция <code>test/gui</code> создает окно, в котором запускаются
заданные тесты.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Начало]]></title>
    <link href="http://smaximov.github.io/blog/2013/06/19/at-the-very-beginning/"/>
    <updated>2013-06-19T21:27:00+11:00</updated>
    <id>http://smaximov.github.io/blog/2013/06/19/at-the-very-beginning</id>
    <content type="html"><![CDATA[<p>Первая запись в блоге.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="cl"><span class="line"><span class="p">(</span><span class="nb">format</span> <span class="no">t</span> <span class="s">&quot;Hello, World!&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
]]></content>
  </entry>
  
</feed>
