<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Peg | Без названия]]></title>
  <link href="http://blog.smaximov.info/blog/categories/peg/atom.xml" rel="self"/>
  <link href="http://blog.smaximov.info/"/>
  <updated>2014-04-09T00:40:18+11:00</updated>
  <id>http://blog.smaximov.info/</id>
  <author>
    <name><![CDATA[Сергей Максимов]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Разбор выражений с помощью PEG]]></title>
    <link href="http://blog.smaximov.info/blog/2014/04/08/parsing-expressions-with-peg-dot-js/"/>
    <updated>2014-04-08T17:46:00+11:00</updated>
    <id>http://blog.smaximov.info/blog/2014/04/08/parsing-expressions-with-peg-dot-js</id>
    <content type="html"><![CDATA[<ul id="markdown-toc">
  <li><a href="#section">Синтаксический анализ</a>    <ul>
      <li><a href="#section-1">Формальная грамматика</a></li>
      <li><a href="#parsing-expression-grammars">Parsing Expression Grammars</a></li>
    </ul>
  </li>
  <li><a href="#section-2">Разбор языка логических выражений</a></li>
  <li><a href="#section-3">Демонстрация</a></li>
  <li><a href="#section-4">Ссылки</a></li>
</ul>

<p>Давным давно<s>, в далёк</s> я
<a href="http://www.cyberforum.ru/post5772306.html">написал</a> код вычисления
логических выражений — просто так, задача интересной показалась.
Для этой цели был написан парсер, который преобразует строку с
логическим выражением в дерево, которое впоследствии вычисляется.
Теперь же захотелось подробно описать (для себя и для потомков), что
же при этом происходило.</p>

<p>В этом посте будет кратко затронуты понятия синтаксического анализа,
формальных грамматик, а также показан синтаксический разбор небольшого
языка с помощью PEG-парсера.</p>

<!-- more -->

<h1 id="section">Синтаксический анализ</h1>

<p>Синтаксический анализ, или <em>парсинг</em>, — это процесс анализа
последовательности символов (<em>строка</em>) какого-нибудь абстрактного <em>алфавита</em>
в соответствии правилами <em>формальной грамматики</em>. В процессе такого
анализа выявляется принадлежность этой строки определённому
<em>формальному языку</em>, который задаётся правилами грамматики над данным
алфавитом.</p>

<h2 id="section-1">Формальная грамматика</h2>

<p>Другими словами, формальная грамматика представляет собой набор
правил, описывающих множество всех возможных строк, которые получены
из некоторого алфавита и принадлежат определённому языку.</p>

<h2 id="parsing-expression-grammars">Parsing Expression Grammars</h2>

<p>Parsing Expression Grammars (PEG) — это один из видов
грамматики, введённый Брайаном Фордом в 2004 году.</p>

<p>Синтаксис состоит из нескольких элементов:</p>

<ul>
  <li>
    <p>Множества <em>терминальных</em> символов, которые «буквально» могут
присутствовать в какой-либо строке языка (обычно обозначаются в виде
строки в одинарных кавычках: <code>'terminal'</code>);</p>
  </li>
  <li>
    <p>множества <em>нетерминальных</em> символов, которым соответствуют группы
терминальных символов в соответствии с некоторыми правилами вывода;
нетерминалы также называют <em>синтаксическими переменными</em>
(обозначаются в виде строки без кавычек: <code>nonterminal</code>);</p>
  </li>
  <li>
    <p>множество <em>правил вывода</em>, которые показывают, как образуются
нетерминалы из терминалов и других нетерминалов;</p>
  </li>
  <li>
    <p>начального <em>выражения</em>.</p>
  </li>
</ul>

<p>Правила вывода имеют вид <code>nonterminal = some_expr</code>, где <code>some_expr</code>
— это <em>выражение</em>. Выражения можно определить по индукции:</p>

<ul>
  <li>
    <p><em>атомарное выражение</em> может состоять из любого терминала,
нетерминала или пустой строки;</p>
  </li>
  <li>
    <p>имея два выражения <em>e<sub>1</sub></em> и <em>e<sub>2</sub></em>, можно построить
новое выражение:</p>

    <ul>
      <li>
        <p><em>e<sub>1</sub></em> <em>e<sub>2</sub></em>: <em>последовательность</em> —
сначала идёт разбор <em>e<sub>1</sub></em>, потом (в случае успешности
разбора <em>e<sub>1</sub></em>) разбор <em>e<sub>2</sub></em>, в случае
неудачи разбора любого подвыражение разбор всего выражения
считается неудачным;</p>
      </li>
      <li>
        <p><em>e<sub>1</sub><sup>*</sup></em>, <em>e<sub>1</sub><sup>+</sup></em>,
<em>e<sub>1</sub>?</em>: <em>ноль или больше</em>, <em>один или больше</em>, <em>ноль или
один</em> раз выполняют разбор выражения <em>e<sub>1</sub></em>;</p>
      </li>
      <li>
        <p><em>e<sub>1</sub> / e<sub>2</sub></em>: <em>упорядоченный выбор</em> —
если <em>e<sub>1</sub></em> успешно, то происходит возврат, в противном
случае парсер откатывается назад и пытается выполнить разбор
<em>e<sub>2</sub></em>;</p>
      </li>
      <li>
        <p><em>&amp;e<sub>1</sub></em>: <em>и-предикат</em> —
разбор выполняется успешно, если выражение
<em>e<sub>1</sub></em> возвращает успех, но при этом парсер
не поглощает ввод;</p>
      </li>
      <li>
        <p><em>!e<sub>1</sub></em>: <em>не-предикат</em> — разбор выполняется
успешно, если выражение <em>e<sub>1</sub></em> возвращает неуспех;
парсер также не поглощает ввод.</p>
      </li>
    </ul>
  </li>
</ul>

<h1 id="section-2">Разбор языка логических выражений</h1>

<p>Yet to be written</p>

<h1 id="section-3">Демонстрация</h1>

<p>Нажмите <a href="http://demos.smaximov.info/peg" target="_blank">сюда</a>, если iframe ниже не
отображается.</p>

<iframe src="http://demos.smaximov.info/peg" height="570" width="100%" style="border-radius: 5px; border: 1px #E0E0E0 groove">
    Your browser doesn't support iframes, sorry :(
</iframe>

<h1 id="section-4">Ссылки</h1>

<ul>
  <li><a href="https://github.com/smaximov/expression-peg-example">Исходный код примера</a></li>
</ul>
]]></content>
  </entry>
  
</feed>
