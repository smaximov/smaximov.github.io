---
layout: post
title: "Разбор выражений с помощью PEG"
date: 2014-04-08 17:46
comments: true
categories:
    - Javascript
    - AngularJS
    - Peg
    - Parsing
---

* TOC
{:toc}

Давным давно<s>, в далёк</s> я
[написал](http://www.cyberforum.ru/post5772306.html) код вычисления
логических выражений &mdash; просто так, задача интересной показалась.
Для этой цели был написан парсер, который преобразует строку с
логическим выражением в дерево, которое впоследствии вычисляется.
Теперь же захотелось подробно описать (для себя и для потомков), что
же при этом происходило.

В этом посте будет кратко затронуты понятия синтаксического анализа,
формальных грамматик, а также показан синтаксический разбор небольшого
языка с помощью PEG-парсера.

<!-- more -->

# Синтаксический анализ

Синтаксический анализ, или *парсинг*, &mdash; это процесс анализа
последовательности символов (*строка*) какого-нибудь абстрактного *алфавита*
в соответствии правилами *формальной грамматики*. В процессе такого
анализа выявляется принадлежность этой строки определённому
*формальному языку*, который задаётся правилами грамматики над данным
алфавитом.

## Формальная грамматика

Другими словами, формальная грамматика представляет собой набор
правил, описывающих множество всех возможных строк, которые получены
из некоторого алфавита и принадлежат определённому языку.

## Parsing Expression Grammars

Parsing Expression Grammars (PEG) &mdash; это один из видов
грамматики, введённый Брайаном Фордом в 2004 году.

Синтаксис состоит из нескольких элементов:

* Множества *терминальных* символов, которые <<буквально>> могут
  присутствовать в какой-либо строке языка (обычно обозначаются в виде
  строки в одинарных кавычках: `'terminal'`);

* множества *нетерминальных* символов, которым соответствуют группы
  терминальных символов в соответствии с некоторыми правилами вывода;
  нетерминалы также называют *синтаксическими переменными*
  (обозначаются в виде строки без кавычек: `nonterminal`).

* множество *правил вывода*, которые показывают, как образуются
  нетерминалы из терминалов и других нетерминалов;

* начального *выражения*.

Правила вывода имеют вид `nonterminal = some_expr`, где `some_expr`
&mdash; это *выражение*. Выражения можно определить по индукции:

* *атомарное выражение* может состоять из любого терминала,
  нетерминала или пустой строки;

* имея два выражения *e<sub>1</sub>* и *e<sub>2</sub>*, можно построить
  новое выражение:

    * *e<sub>1</sub>* *e<sub>2</sub>*: *последовательность* &mdash;
      сначала идёт разбор *e<sub>1</sub>*, потом (в случае успешности
      разбора *e<sub>1</sub>*) разбор *e<sub>2</sub>*, в случае
      неудачи разбора любого подвыражение разбор всего выражения
      считается неудачным;

    * *e<sub>1</sub><sup>\*</sup>*, *e<sub>1</sub><sup>+</sup>*,
      *e<sub>1</sub>?*: *ноль или больше*, *один или больше*, *ноль или
      один* раз выполняют разбор выражения *e<sub>1</sub>*;

    * *e<sub>1</sub> / e<sub>2</sub>*: *упорядоченный выбор* &mdash;
      если *e<sub>1</sub>* успешно, то происходит возврат, в противном
      случае парсер откатывается назад и пытается выполнить разбор
      *e<sub>2</sub>*;

    * *&e<sub>1</sub>*: *и-предикат* &mdash;
      разбор выполняется успешно, если выражение
      *e<sub>1</sub>* возвращает успех, но при этом парсер
      не поглощает ввод;

    * *!e<sub>1</sub>*: *не-предикат* &mdash; разбор выполняется
      успешно, если выражение *e<sub>1</sub>* возвращает неуспех;
      парсер также не поглощает ввод.

# Разбор языка логических выражений

Yet to be written

# Демонстрация

Нажмите [сюда](http://demos.smaximov.info/peg){: target="_blank" }, если iframe ниже не
отображается.

<iframe src="http://demos.smaximov.info/peg" height="570" width="100%"
        style="border-radius: 5px; border: 1px #E0E0E0 groove">
    Your browser doesn't support iframes, sorry :(
</iframe>

# Ссылки

* [Исходный код примера](https://github.com/smaximov/expression-peg-example)
